library(stargazer)
library(foreign)
library(dplyr)
library(stringr)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(sandwich)   # For robust and clustered standard errors
library(lmtest)     # For coeftest
library(stargazer)  # For model output tables
library(ggeffects)
rm(list=ls())
#path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
#path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
path_github <-"C:/Users/Denise Laroze/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/Denise Laroze/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
setwd(path_github)
#load(paste0(path_datos, "/Datos_islitas.Rdata"))
load(paste0(path_datos, "/Datos_islitas_recode.Rdata"))
load(paste0(path_datos, "/Datos_islitas_long.Rdata"))
if (!requireNamespace("semPlot", quietly = TRUE)) install.packages("semPlot")
if (!requireNamespace("lavaan", quietly = TRUE)) install.packages("lavaan")
library(lavaan)
library(semPlot)
names(df)
# Ensure your data frame has the relevant columns
variable_subset <- df[, grep("^T1juegoalgas\\.\\d+\\.player\\.T1_extraccion_libre$", names(df))]
# Calculate the row-wise mean for the selected columns
df$average_extraction <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance<- 1-(df$average_extraction/50)
df$belief_compliance_pm<-1-(df$beliefsT1inicial.1.player.T1_belief_pm_en_libre_ini/50)
df$belief_compliance_union<-1-(df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini/50)
# View the first few rows of the updated data frame
head(df$average_extraction)
head(df$average_compliance)
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance ~ belief_compliance_pm + belief_compliance_union +   survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
'
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Summarize the SEM model results
summary(fit, fit.measures = TRUE, standardized = TRUE)
node_order <- semPaths(fit, what = "std", plot = FALSE)$graphAttributes$Nodes$labels
# View the first few rows of the updated data frame
head(df$average_extraction)
head(df$average_compliance)
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance ~ belief_compliance_pm + belief_compliance_union +   survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
'
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Summarize the SEM model results
summary(fit, fit.measures = TRUE, standardized = TRUE)
node_order <- semPaths(fit, what = "std", plot = FALSE)$graphAttributes$Nodes$labels
summary(fit, fit.measures = TRUE, standardized = TRUE)
# Ensure your data frame has the relevant columns
variable_subset <- df[, grep("^T1juegoalgas\\.\\d+\\.player\\.T1_extraccion_libre$", names(df))]
# Calculate the row-wise mean for the selected columns
df$average_extraction <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance<- 1-(df$average_extraction/50)
df$belief_compliance_pm<-1-(df$beliefsT1inicial.1.player.T1_belief_pm_en_libre_ini/50)
df$belief_compliance_union<-1-(df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini/50)
# View the first few rows of the updated data frame
head(df$average_extraction)
head(df$average_compliance)
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance ~ belief_compliance_pm + belief_compliance_union +   survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta  + otros_libre_t1_mean
'
# Fit the SEM model
fit <- sem(sem_model, data = df)
library(semPlot)
node_labels <- c(belief_compliance_pm =   "Beliefs Compliance Others OA" ,
belief_compliance_union =   "Beliefs Compliance Union OA",
average_compliance = "Mean Compliance OA" ,
survey1.1.player.confianza_pm  =   "Trust Others" ,
survey1.1.player.conflicto_pm =   "Conflict Others" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
otros_libre_t1_mean = "ExtracciÃ³n otros"
)
# Extract parameter estimates from the fitted SEM model
path_results <- parameterEstimates(fit, standardized = TRUE)
# Filter regression paths (op == "~")
regression_paths <- path_results[path_results$op == "~", ]
# Create a vector of path labels for matching
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
# Create a named vector for edge colors based on p-value
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
# Dynamically generate edge colors
n_edges <- length(regression_paths$lhs)  # Number of regression paths
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Check the length of edge_colors matches the number of paths
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
#pdf(paste0(path_github, "Outputs/SEM_compliance_plot.pdf"), width = 12, height = 8)  # Set dimensions in inches
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
sizeLat = 10,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE
)
#dev.off()  # Close the PDF device
semPaths(
fit,
what = "std",
#layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
sizeLat = 10,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE
)
#d
df$belief_compliance_pm<-1-(df$beliefsT1inicial.1.player.T1_belief_pm_en_libre_ini/50)
df$belief_compliance_union<-1-(df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini/50)
df$real_compliance_others<- 1-(df$otros_libre_t1_mean/50)
# View the first few rows of the updated data frame
head(df$average_extraction)
head(df$average_compliance)
# Ensure your data frame has the relevant columns
variable_subset <- df[, grep("^T1juegoalgas\\.\\d+\\.player\\.T1_extraccion_libre$", names(df))]
# Calculate the row-wise mean for the selected columns
df$average_extraction <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance<- 1-(df$average_extraction/50)
df$belief_compliance_pm<-1-(df$beliefsT1inicial.1.player.T1_belief_pm_en_libre_ini/50)
df$belief_compliance_union<-1-(df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini/50)
df$real_compliance_others<- 1-(df$otros_libre_t1_mean/50)
# View the first few rows of the updated data frame
#head(df$average_extraction)
#head(df$average_compliance)
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance ~ belief_compliance_pm + belief_compliance_union +   survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta  + real_compliance_others
'
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Summarize the SEM model results
summary(fit, fit.measures = TRUE, standardized = TRUE)
node_order <- semPaths(fit, what = "std", plot = FALSE)$graphAttributes$Nodes$labels
# Print node order
print(node_order)
node_labels <- c(belief_compliance_pm =   "Beliefs Compliance Others OA" ,
belief_compliance_union =   "Beliefs Compliance Union OA",
average_compliance = "Mean Compliance OA" ,
survey1.1.player.confianza_pm  =   "Trust Others" ,
survey1.1.player.conflicto_pm =   "Conflict Others" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
real_compliance_others = "Oberved compliance"
)
# Extract parameter estimates from the fitted SEM model
path_results <- parameterEstimates(fit, standardized = TRUE)
# Filter regression paths (op == "~")
regression_paths <- path_results[path_results$op == "~", ]
# Create a vector of path labels for matching
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
# Create a named vector for edge colors based on p-value
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
# Dynamically generate edge colors
n_edges <- length(regression_paths$lhs)  # Number of regression paths
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Check the length of edge_colors matches the number of paths
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save the SEM plot as a PDF
#pdf(paste0(path_github, "Outputs/SEM_compliance_plot.pdf"), width = 12, height = 8)  # Set dimensions in inches
semPaths(
fit,
what = "std",
#layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
sizeLat = 10,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE
)
#dev.off()  # Close the PDF device
summary(fit)
# Save the SEM plot as a PDF
pdf(paste0(path_github, "Outputs/SEM_compliance_plot_controling_experience.pdf"), width = 12, height = 8)  # Set dimensions in inches
semPaths(
fit,
what = "std",
#layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
sizeLat = 10,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE
)
dev.off()  # Close the PDF device
# Ensure your data frame has the relevant columns
variable_subset <- df[, grep("^T1juegoalgas\\.\\d+\\.player\\.T1_extraccion_libre$", names(df))]
# Calculate the row-wise mean for the selected columns
df$average_extraction <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance<- 1-(df$average_extraction/50)
df$belief_compliance_pm<-1-(df$beliefsT1inicial.1.player.T1_belief_pm_en_libre_ini/50)
df$belief_compliance_union<-1-(df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini/50)
df$real_compliance_others<- 1-(df$otros_libre_t1_mean/50)
# View the first few rows of the updated data frame
#head(df$average_extraction)
#head(df$average_compliance)
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance ~ belief_compliance_pm + belief_compliance_union +   survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta  + real_compliance_others
'
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Summarize the SEM model results
summary(fit, fit.measures = TRUE, standardized = TRUE)
node_order <- semPaths(fit, what = "std", plot = FALSE)$graphAttributes$Nodes$labels
# Print node order
print(node_order)
node_labels <- c(belief_compliance_pm =   "Beliefs Compliance Others OA" ,
belief_compliance_union =   "Beliefs Compliance Union OA",
average_compliance = "Mean Compliance OA" ,
survey1.1.player.confianza_pm  =   "Trust Others" ,
survey1.1.player.conflicto_pm =   "Conflict Others" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
real_compliance_others = "Observed compliance"
)
# Extract parameter estimates from the fitted SEM model
path_results <- parameterEstimates(fit, standardized = TRUE)
# Filter regression paths (op == "~")
regression_paths <- path_results[path_results$op == "~", ]
# Create a vector of path labels for matching
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
# Create a named vector for edge colors based on p-value
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
# Dynamically generate edge colors
n_edges <- length(regression_paths$lhs)  # Number of regression paths
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Check the length of edge_colors matches the number of paths
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save the SEM plot as a PDF
pdf(paste0(path_github, "Outputs/SEM_compliance_plot_controling_experience.pdf"), width = 12, height = 8)  # Set dimensions in inches
semPaths(
fit,
what = "std",
#layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
sizeLat = 10,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE
)
dev.off()  # Close the PDF device
node_labels <- c(belief_compliance_pm =   "Beliefs Compliance Others OA" ,
belief_compliance_union =   "Beliefs Compliance Union OA",
average_compliance = "Mean Compliance OA" ,
survey1.1.player.confianza_pm  =   "Trust Others" ,
survey1.1.player.conflicto_pm =   "Conflict Others" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
real_compliance_others = "Observed Compliance OA"
)
# Extract parameter estimates from the fitted SEM model
path_results <- parameterEstimates(fit, standardized = TRUE)
# Filter regression paths (op == "~")
regression_paths <- path_results[path_results$op == "~", ]
# Create a vector of path labels for matching
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
# Create a named vector for edge colors based on p-value
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
# Dynamically generate edge colors
n_edges <- length(regression_paths$lhs)  # Number of regression paths
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Check the length of edge_colors matches the number of paths
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save the SEM plot as a PDF
pdf(paste0(path_github, "Outputs/SEM_compliance_plot_controling_experience.pdf"), width = 12, height = 8)  # Set dimensions in inches
semPaths(
fit,
what = "std",
#layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
sizeLat = 10,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE
)
dev.off()  # Close the PDF device
