"Female", "Male", "Low Fin. Lit.", "Mid Fin. Lit.", "High Fin. Lit.",
"Post-graduate degree", "Primary or high-school degree", "University degree",
"Public Health or other", "Private healthcare", "Age (mean)", "Age (sd)"
)
# Compute p-values for all variables
p_values <- c(
chi.s1$p.value, chi.s2$p.value, chi.s3$p.value, chi.s4$p.value, NA  # NA for Age SD
)
p_values_repeated <- c(
rep(p_values[1], 2),  # s1 has two rows (Female, Male)
rep(p_values[2], 3),  # s2 has three rows (Financial Literacy)
rep(p_values[3], 3),  # s3 has three rows (Education)
rep(p_values[4], 2),  # s4 has two rows (Health)
rep(p_values[5], 2)   # s5 has two rows (Age mean and Age SD)
)
tbl_final$`P-value` <- round(p_values_repeated, 4)
# Rename columns for final table
colnames(tbl_final) <- c(
"Variable", "Baseline", "Profile", "Video", "Profile and Video",
"Total", "% Baseline", "% Profile", "% Video", "% Profile and Video", "P-value"
)
# Export table to LaTeX
xt <- xtable(tbl_final)
print(xt, type = "latex", file = paste0(path_github, "/Outputs/balance_numbers_lab.tex"),
floating = FALSE, include.rownames = FALSE)
# Clean up the environment
rm(tbl, tbl_wide, s1, s2, s3, s4, s5, tbl_final)
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
library(naniar)
library(nnet)
library(lmtest)
library(sandwich)
rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/Lab Data/Surveys and websites/"
df <- readRDS(paste0(path_datos, "lab_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
path_datos <- "C:/Users/DCCS2/Dropbox/Sitios web/Datos Laboratorio/Videos/"
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/"
df<-read.csv(paste0(path_datos,"dataset_con_columnas_2024.csv"))
View(df)
data_webA <- load_webA();
# Updated power calculation function using OLS model
set.seed(23658)
power <- function(rep, esize, N) {
pv <- rep(NA, rep)  # Initialize p-values storage
for (i in 1:rep) {
# Generate the data
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
# Add normally distributed errors with sigma = 0.2
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 1)
# Fit the linear model
model <- lm(given ~ samegroup, data = mydata)
# Extract p-value for 'samegroup' coefficient
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
# Store p-value
pv[i] <- p
}
# Calculate power
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Single calculation with a fixed N
power(rep = 100, esize = 0.8, N = 30)
# Loop over multiple N values
N <- seq(10, 200, 2)
M <- length(N)
N.power <- rep(NA, M)
for (i in 1:M) {
N.power[i] <- power(rep = 100, esize = 0.8, N = N[i])
}
# Plot the power calculations
plot(N.power, N / 2, main = "Power calculations", ylab = "Number of obs in each group", xlab = "Power")
###############################
############# Multiple betas
###############################
# Power calculation function using OLS model
# Define the updated power function with OLS model
set.seed(23569)
power <- function(rep, esize, N) {
pv <- rep(NA, rep)
for (i in 1:rep) {
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 1)
model <- lm(given ~ samegroup, data = mydata)
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
pv[i] <- p
}
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Set up parameters for the simulation
N <- seq(10, 100, 2)  # Sample sizes to test
effects <- seq(0.6, 0.9, by = 0.1)  # Different effect sizes to test
M <- length(N)
K <- length(effects)
# Initialize a matrix to store power calculations for each (N, effect size) pair
ne.power <- matrix(NA, nrow = M, ncol = K)
# Calculate power for each effect size and sample size
for (i in 1:M) {
for (j in 1:K) {
ne.power[i, j] <- power(rep = 500, esize = effects[j], N = N[i])
}
}
# Plot the results
par(mfrow = c(3, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
abline(v = 0.8, col = "red", lty = 2)  # Add a red vertical dashed line at x = 0.8
}
# Plot the results
par(mfrow = c(2, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
abline(v = 0.8, col = "red", lty = 2)  # Add a red vertical dashed line at x = 0.8
}
rm(list=ls())
#path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:-/Users/DCCS2/Dropbox/R&R Chilean pensions paper/"
#path_datos <- "C:/Users/DCCS2/Dropbox/Sitios web/Datos Laboratorio/Videos/"
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/"
df<-read.csv(paste0(path_datos,"dataset_con_columnas.csv"))
rm(list=ls())
#path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Dropbox/R&R Chilean pensions paper/"
#path_datos <- "C:/Users/DCCS2/Dropbox/Sitios web/Datos Laboratorio/Videos/"
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/"
df<-read.csv(paste0(path_datos,"dataset_con_columnas.csv"))
df$Profile_Video<-ifelse(df$sitio=="VideoPerfil", "Profile_Video", "Other")
df$t_perfil <- factor(df$t_perfil, levels = c("producto", "perfil"))
#####################
### Balance
####################
table(df$t_perfil, df$video)
table(df$treatment)
table(df$video)
names(df)
lm1<-lm(Valence2 ~ t_perfil + t_video + Profile_Video , data = df)
lm2<-lm(Arousal2 ~ t_perfil + t_video + Profile_Video , data = df)
lm3<-lm(Happy2 ~ t_perfil + t_video + Profile_Video , data = df)
lm4<-lm(Sad2 ~ t_perfil + t_video + Profile_Video , data = df)
lm5<-lm(Angry2 ~ t_perfil + t_video + Profile_Video , data = df)
lm6<-lm(Surprised2 ~ t_perfil + t_video + Profile_Video , data = df)
lm7<-lm(Scared2 ~ t_perfil + t_video + Profile_Video , data = df)
lm8<-lm(Disgusted2 ~ t_perfil + t_video + Profile_Video , data = df)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
library(stargazer)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, out=paste0(path_datos,"emotions.html"), type="html")
lm1<-lm(Valence1 ~ t_perfil + t_video + Profile_Video , data = df)
lm2<-lm(Arousal1 ~ t_perfil + t_video + Profile_Video , data = df)
lm3<-lm(Happy1 ~ t_perfil + t_video + Profile_Video , data = df)
lm4<-lm(Sad1 ~ t_perfil + t_video + Profile_Video , data = df)
lm5<-lm(Angry1 ~ t_perfil + t_video + Profile_Video , data = df)
lm6<-lm(Surprised1 ~ t_perfil + t_video + Profile_Video , data = df)
lm7<-lm(Scared1 ~ t_perfil + t_video + Profile_Video , data = df)
lm8<-lm(Disgusted1 ~ t_perfil + t_video + Profile_Video , data = df)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, out=paste0(path_datos,"emotions.html"), type="html")
lm1<-lm(ValenceX2 ~ t_perfil + t_video + Profile_Video , data = df)
lm2<-lm(ArousalX2 ~ t_perfil + t_video + Profile_Video , data = df)
lm3<-lm(Happy2 ~ t_perfil + t_video + Profile_Video , data = df)
lm4<-lm(Sad2 ~ t_perfil + t_video + Profile_Video , data = df)
lm5<-lm(Angry2 ~ t_perfil + t_video + Profile_Video , data = df)
lm6<-lm(Surprised2 ~ t_perfil + t_video + Profile_Video , data = df)
lm7<-lm(Scared2 ~ t_perfil + t_video + Profile_Video , data = df)
lm8<-lm(Disgusted2 ~ t_perfil + t_video + Profile_Video , data = df)
#stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, out=paste0(path_datos,"emotions.html"), type="html")
,
################################
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
library(naniar)
library(nnet)
library(lmtest)
library(sandwich)
library(lubridate)
library(dplyr)
library(tidyr)
library(xtable)
#rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Online/Online Data/"
df <- readRDS(paste0(path_datos, "online_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
### Correct Response
lm_CR <- lm(correct_response/7 ~ Profile + Video + Profile_Video + as.factor(financial_lit_b) ,
data = df)
lm_CR2<-coeftest(lm_CR, vcov = vcovHC(lm_CR, type = 'HC0'))
lm_CR_pv <- lm(correct_response/7 ~ Profile + Video + Profile_Video + as.factor(financial_lit_b),
data = df[df$Pension_Type=="Public",])
lm_CR_pv2<-coeftest(lm_CR_pv, vcov = vcovHC(lm_CR_pv, type = 'HC0'))
lm_CR_pp <- lm(correct_response/7 ~ Profile + Video + Profile_Video + as.factor(financial_lit_b),
data = df[df$Pension_Type=="Private",])
lm_CR_pp2<-coeftest(lm_CR_pp, vcov = vcovHC(lm_CR_pp, type = 'HC0'))
lm_CR_F <- lm(correct_response/7 ~ Profile + Video + Profile_Video + as.factor(financial_lit_b),
data = df[df$Gender=="F",])
lm_CR_F2<-coeftest(lm_CR_F, vcov = vcovHC(lm_CR_F, type = 'HC0'))
lm_CR_M <- lm(correct_response/7 ~ Profile + Video + Profile_Video + as.factor(financial_lit_b),
data = df[df$Gender=="M",])
lm_CR_M2<-coeftest(lm_CR_M, vcov = vcovHC(lm_CR_M, type = 'HC0'))
lm_CR_ns <- lm(correct_response/7 ~ Profile + Video + Profile_Video + as.factor(financial_lit_b),
data = df[df$PlanJubi=="No sabe",])
lm_CR_ns2<-coeftest(lm_CR_ns, vcov = vcovHC(lm_CR_ns, type = 'HC0'))
stargazer(lm_CR, lm_CR_pv, lm_CR_pp, lm_CR_F, lm_CR_M, lm_CR_ns)
stargazer(lm_CR2, lm_CR_pv2, lm_CR_pp2, lm_CR_F2, lm_CR_M2, lm_CR_ns2, out=paste0(path_github,"online/Outputs/prop_correct_response.html"), type="html",
#covariate.labels = c("Profile$\\_i$", "Video$\\_j$", "Profile$\\_i$xVideo$\\_j$", "Mid Fin. Lit.", "High Fin. Lit.", "Constant"),
#dep.var.labels = c("Number of correct responses"), # keep.stat=c("n", "ll"),7
column.labels = c("Full Online", "Private", "Public", "Female", "Male", "Doesn't know"),
add.lines=list(c("Observations", nobs(lm_CR),nobs(lm_CR_pv), nobs(lm_CR_pp), nobs(lm_CR_F), nobs(lm_CR_M), nobs(lm_CR_ns)),
c("R\\^2", round(summary(lm_CR)$r.squared, 3), round(summary(lm_CR_pv)$r.squared, 3), round(summary(lm_CR_pp)$r.squared, 3),
round(summary(lm_CR_F)$r.squared, 3) , round(summary(lm_CR_M)$r.squared, 3) , round( summary(lm_CR_ns)$r.squared, 3)),
c("Adjusted R\\^2", round(summary(lm_CR)$adj.r.squared, 3), round(summary(lm_CR_pv)$adj.r.squared, 3),
round(summary(lm_CR_pp)$adj.r.squared, 3), round(summary(lm_CR_F)$adj.r.squared, 3) , round(summary(lm_CR_M)$adj.r.squared,3),
round( summary(lm_CR_ns)$adj.r.squared, 3)))
)
stargazer(lm_CR2, lm_CR_pv2, lm_CR_pp2, lm_CR_F2, lm_CR_M2, lm_CR_ns2, out=paste0(path_github,"Outputs/prop_correct_response.html"), type="html",
#covariate.labels = c("Profile$\\_i$", "Video$\\_j$", "Profile$\\_i$xVideo$\\_j$", "Mid Fin. Lit.", "High Fin. Lit.", "Constant"),
#dep.var.labels = c("Number of correct responses"), # keep.stat=c("n", "ll"),7
column.labels = c("Full Online", "Private", "Public", "Female", "Male", "Doesn't know"),
add.lines=list(c("Observations", nobs(lm_CR),nobs(lm_CR_pv), nobs(lm_CR_pp), nobs(lm_CR_F), nobs(lm_CR_M), nobs(lm_CR_ns)),
c("R\\^2", round(summary(lm_CR)$r.squared, 3), round(summary(lm_CR_pv)$r.squared, 3), round(summary(lm_CR_pp)$r.squared, 3),
round(summary(lm_CR_F)$r.squared, 3) , round(summary(lm_CR_M)$r.squared, 3) , round( summary(lm_CR_ns)$r.squared, 3)),
c("Adjusted R\\^2", round(summary(lm_CR)$adj.r.squared, 3), round(summary(lm_CR_pv)$adj.r.squared, 3),
round(summary(lm_CR_pp)$adj.r.squared, 3), round(summary(lm_CR_F)$adj.r.squared, 3) , round(summary(lm_CR_M)$adj.r.squared,3),
round( summary(lm_CR_ns)$adj.r.squared, 3)))
)
rm(list=ls())
#path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Dropbox/R&R Chilean pensions paper/"
#path_datos <- "C:/Users/DCCS2/Dropbox/Sitios web/Datos Laboratorio/Videos/"
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/"
df<-read.csv(paste0(path_datos,"dataset_con_columnas.csv"))
View(df)
df$Profile_Video<-ifelse(df$sitio=="VideoPerfil", "Profile_Video", "Other")
View(df)
df<-read.csv2(paste0(path_datos,"dataset_con_columnas.csv"))
###############################
##### Data Management #########
###############################
df$Profile_Video<-ifelse(df$sitio=="VideoPerfil", "Profile_Video", "Other")
df$t_perfil <- factor(df$t_perfil, levels = c("producto", "perfil"))
#####################
library(stargazer)
lm1<-lm(ValenceX2 ~ t_perfil + t_video + Profile_Video , data = df)
lm2<-lm(ArousalX2 ~ t_perfil + t_video + Profile_Video , data = df)
lm3<-lm(Happy2 ~ t_perfil + t_video + Profile_Video , data = df)
lm4<-lm(Sad2 ~ t_perfil + t_video + Profile_Video , data = df)
lm5<-lm(Angry2 ~ t_perfil + t_video + Profile_Video , data = df)
lm6<-lm(Surprised2 ~ t_perfil + t_video + Profile_Video , data = df)
lm7<-lm(Scared2 ~ t_perfil + t_video + Profile_Video , data = df)
lm8<-lm(Disgusted2 ~ t_perfil + t_video + Profile_Video , data = df)
#stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8)
stargazer(lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, out=paste0(path_datos,"emotions.html"), type="html")
library(shiny); runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app_dl4.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app_dl4.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app_dl4.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app_dl5.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app_dl5.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app_dl5.R')
library(shiny); runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app2.2.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app2.2.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app2.2.R')
runApp('C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Shiny_SEM/app2.2.R')
# 1. Preparar
set.seed(2025)
n <- 1000
# Covariables
X1 <- rnorm(n)                 # p.ej., puntaje de mérito estandarizado
X2 <- rbinom(n, 1, 0.5)        # p.ej., indicador de experiencia previa
# 2. Definir parámetros de la DGP
# Para multinomial: definimos betas para cada categoría 1 y 2 (base = 0)
beta1 <- c(intercept = -1, X1 =  0.8, X2 =  0.5)
beta2 <- c(intercept =  0, X1 =  1.2, X2 = -0.3)
# 3. Calcular utilidades y probabilidades
# matriz de diseño
X <- cbind(1, X1, X2)
# utilidades lineales
eta1 <- X %*% beta1
eta2 <- X %*% beta2
# probabilidades multinomiales con base categoría 0
exp1 <- exp(eta1)
exp2 <- exp(eta2)
denom <- 1 + exp1 + exp2
p0 <- 1 / denom
p1 <- exp1 / denom
p2 <- exp2 / denom
# 4. Simular la categoría observada
U <- runif(n)
y_mul <- ifelse(U < p0, 0, ifelse(U < p0 + p1, 1, 2))
# 5. Montar el data.frame
df <- data.frame(
outcome = factor(y_mul, levels = 0:2, labels = c("Rechazado","Espera","Gana")),
X1 = X1,
X2 = X2
)
# 6. Estimación del modelo multinomial (mlogit)
library(nnet)
mlogit_mod <- multinom(outcome ~ X1 + X2, data = df)
summary(mlogit_mod)
stargazer(mlogit_mod)
library(stargazer)
stargazer(mlogit_mod)
stargazer(mlogit_mod, type="text")
df$outcome_ord <- ordered(df$outcome,
levels = c("Rechazado","Espera","Gana"))
ologit_mod <- polr(outcome_ord ~ X1 + X2, data = df, Hess = TRUE)
library(MASS)
# Convertimos outcome a ordered factor
df$outcome_ord <- ordered(df$outcome,
levels = c("Rechazado","Espera","Gana"))
ologit_mod <- polr(outcome_ord ~ X1 + X2, data = df, Hess = TRUE)
summary(ologit_mod)
stargazer(ologit_mod, type="text")
effect_size <- 100
# Standard deviation
sd <- 150
# Cohen's d = mean difference / SD
d <- effect_size / sd
# Sample size calculation
power.t.test(power = 0.8, sig.level = 0.05, delta = effect_size,
sd = sd, type = "two.sample", alternative = "two.sided")
effect_size <- 50
# Standard deviation
sd <- 150
# Cohen's d = mean difference / SD
d <- effect_size / sd
# Sample size calculation
power.t.test(power = 0.8, sig.level = 0.05, delta = effect_size,
sd = sd, type = "two.sample", alternative = "two.sided")
effect_size <- 75
# Standard deviation
sd <- 150
# Cohen's d = mean difference / SD
d <- effect_size / sd
# Sample size calculation
power.t.test(power = 0.8, sig.level = 0.05, delta = effect_size,
sd = sd, type = "two.sample", alternative = "two.sided")
if (!requireNamespace("semPlot", quietly = TRUE)) install.packages("semPlot")
if (!requireNamespace("lavaan", quietly = TRUE)) install.packages("lavaan")
library(lavaan)
library(semPlot)
rm(list=ls())
path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
#path_github <-"C:/Users/Denise Laroze/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
#path_datos<-"C:/Users/Denise Laroze/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
setwd(path_github)
#load(paste0(path_datos, "/Datos_islitas.Rdata"))
load(paste0(path_datos, "/Datos_islitas_recode.Rdata"))
load(paste0(path_datos, "/Datos_islitas_long.Rdata"))
# Set parameters for rounds
round1 <- 1
rounds_start <- 2
rounds_end <- 8
# Function to get columns by round
get_columns_by_round <- function(prefix, suffix, start, end = NULL) {
if (is.null(end)) end <- start
colnames <- character()
rounds <- start:end
for (r in rounds) {
pattern <- paste0("^", prefix, "\\.", r, "\\.player\\.", suffix, "$")
matched <- grep(pattern, names(df), value = TRUE)
if (length(matched) > 0) {
colnames <- c(colnames, matched)
}
}
if (length(colnames) == 0) stop(paste("No matching columns for", prefix, suffix, start, end))
colnames
}
# SEM Plotting Function (automatic labels)
save_sem_plot <- function(fit, title_text, output_file) {
pdf(output_file, width = 7, height = 5)
semPaths(fit,
what = "std",
layout = "tree",
label.prop = "name",
edge.label.cex = 0.8,
sizeMan = 8,
node.width = 2,
node.height = 0.7,
shapeMan = "rectangle",
residuals = FALSE,
intercepts = FALSE,
fade = FALSE)
title(main = title_text, cex.main = 1)
dev.off()
}
# Generate SEM for Round 1
cols_round1 <- get_columns_by_round("T1juegoalgas", "T1_extraccion_amerb", round1)
df$average_extraction_round1 <- df[, cols_round1, drop = TRUE]
df$average_compliance_round1 <- 1 - (df$average_extraction_round1 / 50)
df$belief_compliance_round1 <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_amerb_ini / 50)
sem_model_round1 <- 'belief_compliance_round1 ~ survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
average_compliance_round1 ~ belief_compliance_round1 + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta'
fit_round1 <- sem(sem_model_round1, data = df)
output_file_round1 <- paste0(path_github, "Outputs/SEM_compliance_T1_plot_Round_", round1, ".pdf")
save_sem_plot(fit_round1, paste("TURF Round", round1), output_file_round1)
# Generate SEM for Round 1
cols_round1 <- get_columns_by_round("T1juegoalgas", "T1_extraccion_amerb", round1)
df$average_extraction_round1 <- df[, cols_round1, drop = TRUE]
df$average_compliance_round1 <- 1 - (df$average_extraction_round1 / 50)
df$belief_compliance_round1 <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_amerb_ini / 50)
sem_model_round1 <- 'belief_compliance_round1 ~ survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
average_compliance_round1 ~ belief_compliance_round1 + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta'
fit_round1 <- sem(sem_model_round1, data = df)
output_file_round1 <- paste0(path_github, "Outputs/SEM_compliance_T1_plot_Round3_", round1, ".pdf")
save_sem_plot(fit_round1, paste("TURF Round", round1), output_file_round1)
round1 <- 1
rounds_start <- 2
rounds_end <- 8
# Function to get columns by round
get_columns_by_round <- function(prefix, suffix, start, end = NULL) {
if (is.null(end)) end <- start
colnames <- character()
rounds <- start:end
for (r in rounds) {
pattern <- paste0("^", prefix, "\\.", r, "\\.player\\.", suffix, "$")
matched <- grep(pattern, names(df), value = TRUE)
if (length(matched) > 0) {
colnames <- c(colnames, matched)
}
}
if (length(colnames) == 0) stop(paste("No matching columns for", prefix, suffix, start, end))
colnames
}
# SEM Plotting Function (automatic labels)
save_sem_plot <- function(fit, title_text, output_file) {
pdf(output_file, width = 7, height = 5)
semPaths(fit,
what = "std",
layout = "tree",
whatLabels = "name",
edge.label.cex = 0.8,
sizeMan = 8,
node.width = 2,
node.height = 0.7,
shapeMan = "rectangle",
residuals = FALSE,
intercepts = FALSE,
fade = FALSE)
title(main = title_text, cex.main = 1)
dev.off()
}
# Generate SEM for Round 1
cols_round1 <- get_columns_by_round("T1juegoalgas", "T1_extraccion_amerb", round1)
df$average_extraction_round1 <- df[, cols_round1, drop = TRUE]
df$average_compliance_round1 <- 1 - (df$average_extraction_round1 / 50)
df$belief_compliance_round1 <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_amerb_ini / 50)
sem_model_round1 <- 'belief_compliance_round1 ~ survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
average_compliance_round1 ~ belief_compliance_round1 + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta'
fit_round1 <- sem(sem_model_round1, data = df)
output_file_round1 <- paste0(path_github, "Outputs/SEM_compliance_T1_plot_Round3_", round1, ".pdf")
save_sem_plot(fit_round1, paste("TURF Round", round1), output_file_round1)
round1 <- 1
rounds_start <- 2
rounds_end <- 8
# Function to get columns by round
get_columns_by_round <- function(prefix, suffix, start, end = NULL) {
if (is.null(end)) end <- start
colnames <- character()
rounds <- start:end
for (r in rounds) {
pattern <- paste0("^", prefix, "\\.", r, "\\.player\\.", suffix, "$")
matched <- grep(pattern, names(df), value = TRUE)
if (length(matched) > 0) {
colnames <- c(colnames, matched)
}
}
if (length(colnames) == 0) stop(paste("No matching columns for", prefix, suffix, start, end))
colnames
}
# SEM Plotting Function (automatic labels)
save_sem_plot <- function(fit, title_text, output_file) {
pdf(output_file, width = 7, height = 5)
semPaths(fit,
what = "std",
layout = "tree",
whatLabels = "name",
edge.label.cex = 0.8,
sizeMan = 8,
node.width = 2,
node.height = 0.7,
shapeMan = "rectangle",
residuals = FALSE,
intercepts = FALSE,
fade = FALSE)
title(main = title_text, cex.main = 1)
dev.off()
}
# Generate SEM for Round 1
cols_round1 <- get_columns_by_round("T1juegoalgas", "T1_extraccion_amerb", round1)
df$average_extraction_round1 <- df[, cols_round1, drop = TRUE]
df$average_compliance_round1 <- 1 - (df$average_extraction_round1 / 50)
df$belief_compliance_round1 <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_amerb_ini / 50)
sem_model_round1 <- 'belief_compliance_round1 ~ survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
average_compliance_round1 ~ belief_compliance_round1 + survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta'
fit_round1 <- sem(sem_model_round1, data = df)
output_file_round1 <- paste0(path_github, "Outputs/SEM_compliance_T1_plot_Round3_", round1, ".pdf")
save_sem_plot(fit_round1, paste("TURF Round", round1), output_file_round1)
