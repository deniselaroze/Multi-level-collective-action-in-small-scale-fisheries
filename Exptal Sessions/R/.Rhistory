edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save each SEM plot with a dynamic filename
output_file <- paste0(path_github, "Outputs/SEM_compliance_OA_T2_plot_Rounds_", R, "_to_", N, ".png")
png(output_file, width = 1200, height = 800, res = 300)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add dynamic title
title(main = paste("Mean Compliance Scenario 2 Open Access Rounds ", R ," to ", N),line = 3.5, cex.main = 0.8)
# Close the PDF device
dev.off()
# End of script
########################################
### SEM in TURF Scenario 2 Round 1
########################################
# Set R to 1
R <- 1
# Subset variables dynamically
variable_subset <- df[, grep("^T2juegoalgas\\.\\d+\\.player\\.T2_extraccion_amerb$", names(df))]
variable_subset <- variable_subset[, R, drop = FALSE]  # Select only the first round
# Calculate the row-wise mean for the selected column
df$average_extraction_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_ini <- 1 - (df$average_extraction_ini / 50)
# Belief compliance
df$belief_compliance_amerb <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_amerb_ini / 50)
# Define the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_amerb  ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance_ini ~ belief_compliance_amerb +  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
'
node_labels <- c(
belief_compliance_amerb = "Beliefs Compl. Union",
average_compliance_ini = "Compliance",
survey1.1.player.confianza_caleta = "Trust Union",
survey1.1.player.conflicto_caleta = "Conflict Union"
)
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Extract path results and edge colors dynamically
path_results <- parameterEstimates(fit, standardized = TRUE)
regression_paths <- path_results[path_results$op == "~", ]
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Ensure edge_colors matches the number of paths
n_edges <- length(regression_paths$lhs)
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save SEM plot with a dynamic filename
output_file <- paste0(path_github, "Outputs/SEM_compliance_amerb_T2_plot_Round_1.png")
png(output_file, width = 1200, height = 800, res = 300)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add title
title(main = "Mean Compliance TURF Round 1 Scenario 2", line = 3.5, cex.main = 0.8)
# Close the PDF device
dev.off()
###################################
### SEM TURF Scenario 2 rounds (5:8)
###################################
# Set R (starting round)
R <- 5
# Loop through N from (R+1) to 8
for (N in (R+1):8) {
# Subset variables dynamically for amerb extraction
variable_subset <- df[, grep("^T2juegoalgas\\.\\d+\\.player\\.T2_extraccion_amerb$", names(df))]
variable_subset <- variable_subset[, R:N]  # Select columns for current N
# Calculate the row-wise mean for selected columns
df$average_extraction_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_ini <- 1 - (df$average_extraction_ini / 50)
# Belief compliance for amerb
df$belief_compliance_amerb <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_amerb_ini / 50)
# Observed compliance
variable_subset <- df[, grep("T2juegoalgas\\.(\\d+)\\.player\\..+_extraccion_otros_amerb$", names(df))]
variable_subset <- variable_subset[, R:N-1]
df$average_extraction_observed_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_observed_ini_lag <- 1 - (df$average_extraction_observed_ini / 150)
}
# Define the SEM model for amerb
sem_model <- '
# Relationships for beliefs
belief_compliance_amerb  ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance_ini ~ belief_compliance_amerb +
survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta + average_compliance_observed_ini_lag
'
# Node labels
node_labels <- c(
belief_compliance_amerb = "Beliefs Compl. Union",
average_compliance_ini = "Compliance",
survey1.1.player.confianza_caleta = "Trust Union",
survey1.1.player.conflicto_caleta = "Conflict Union",
average_compliance_observed_ini_lag = "Observed Compliance (t-1)"
)
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Extract path results and edge colors dynamically
path_results <- parameterEstimates(fit, standardized = TRUE)
regression_paths <- path_results[path_results$op == "~", ]
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Ensure edge_colors matches the number of paths
n_edges <- length(regression_paths$lhs)
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save SEM plot with a dynamic filename
output_file <- paste0(path_github, "Outputs/SEM_compliance_amerb_T2_plot_Rounds_", R, "_to_", N, ".png")
png(output_file, width = 1200, height = 800, res = 300)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add dynamic title
title(main = paste("Mean Compliance Scenario 2 TURF Rounds ", R ," to ", N), line = 3.5, cex.main = 0.8)
# Close the P
# Close the PDF device
dev.off()
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stargazer)
if (!requireNamespace("semPlot", quietly = TRUE)) install.packages("semPlot")
if (!requireNamespace("lavaan", quietly = TRUE)) install.packages("lavaan")
library(lavaan)
library(semPlot)
rm(list=ls())
#path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
#path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
path_github <-"C:/Users/Denise Laroze/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/Denise Laroze/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
setwd(path_github)
#load(paste0(path_datos, "/Datos_islitas.Rdata"))
load(paste0(path_datos, "/Datos_islitas_recode.Rdata"))
load(paste0(path_datos, "/Datos_islitas_long.Rdata"))
R<-5 # From which round to start
# Loop through N from 1 to 8
for (N in (R+1):8) {
# Subset variables dynamically
variable_subset <- df[, grep("^T2juegoalgas\\.\\d+\\.player\\.T2_extraccion_metat$", names(df))]
variable_subset <- variable_subset[, R:N]  # Select columns for current N
# Calculate the row-wise mean for selected columns
df$average_extraction_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_ini <- 1 - (df$average_extraction_ini / 50)
# Belief compliance
df$belief_compliance_pm <- 1 - (df$beliefsT2inicial.1.player.T2_belief_caleta_conocida_mean_ini / 50)
df$belief_compliance_union <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini / 50)
# Observed compliance
variable_subset <- df[, grep("T2juegoalgas\\.(\\d+)\\.player\\..+_extraccion_otros_metat$", names(df))]
variable_subset <- variable_subset[, R:N-1]
df$average_extraction_observed_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_observed_ini_lag <- 1 - (df$average_extraction_observed_ini / 150)
}
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey2.1.player.confianza_caleta_conocida_mean + survey2.1.player.conflicto_caleta_conocida_mean
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance_ini ~ belief_compliance_pm + belief_compliance_union +
survey1.1.player.confianza_pm + survey1.1.player.conflicto_pm + survey1.1.player.confianza_caleta +
survey1.1.player.conflicto_caleta  + average_compliance_observed_ini_lag
'
#name variable so that there are comprensible
node_labels <- c(belief_compliance_pm =   "Beliefs Compl. Others" ,
belief_compliance_union =   "Beliefs Compl. Union",
average_compliance_ini = "Compliance" ,
survey2.1.player.confianza_caleta_conocida_mean  =   "Trust Others (mean)" ,
survey2.1.player.conflicto_caleta_conocida_mean =   "Conflict Others (mean)" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
average_compliance_observed_ini_lag = "Observed Compliance (t-1)"
)
# Fit the SEM model
fit <- sem(sem_model, data = df)
summary(fit)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
#nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
#nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
#edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
#######################
#### SEM in OA Scenario 2 Rounds (5:8)
########################################
R<-5 # From which round to start
# Loop through N from 1 to 8
for (N in (R+1):8) {
# Subset variables dynamically
variable_subset <- df[, grep("^T2juegoalgas\\.\\d+\\.player\\.T2_extraccion_metat$", names(df))]
variable_subset <- variable_subset[, R:N]  # Select columns for current N
# Calculate the row-wise mean for selected columns
df$average_extraction_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_ini <- 1 - (df$average_extraction_ini / 50)
# Belief compliance
df$belief_compliance_pm <- 1 - (df$beliefsT2inicial.1.player.T2_belief_caleta_conocida_mean_ini / 50)
df$belief_compliance_union <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini / 50)
# Observed compliance
variable_subset <- df[, grep("T2juegoalgas\\.(\\d+)\\.player\\..+_extraccion_otros_metat$", names(df))]
variable_subset <- variable_subset[, R:N-1]
df$average_extraction_observed_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_observed_ini_lag <- 1 - (df$average_extraction_observed_ini / 150)
}
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey2.1.player.confianza_caleta_conocida_mean + survey2.1.player.conflicto_caleta_conocida_mean
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance_ini ~ belief_compliance_pm + belief_compliance_union +
survey2.1.player.confianza_caleta_conocida_mean + survey2.1.player.conflicto_caleta_conocida_mean +
survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta  +
average_compliance_observed_ini_lag
'
#name variable so that there are comprensible
node_labels <- c(belief_compliance_pm =   "Beliefs Compl. Others" ,
belief_compliance_union =   "Beliefs Compl. Union",
average_compliance_ini = "Compliance" ,
survey2.1.player.confianza_caleta_conocida_mean  =   "Trust Others (mean)" ,
survey2.1.player.conflicto_caleta_conocida_mean =   "Conflict Others (mean)" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
average_compliance_observed_ini_lag = "Observed Compliance (t-1)"
)
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Extract path results and edge colors dynamically
path_results <- parameterEstimates(fit, standardized = TRUE)
regression_paths <- path_results[path_results$op == "~", ]
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Ensure edge_colors matches the number of paths
n_edges <- length(regression_paths$lhs)
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save each SEM plot with a dynamic filename
output_file <- paste0(path_github, "Outputs/SEM_compliance_OA_T2_plot_Rounds_", R, "_to_", N, ".png")
png(output_file, width = 1200, height = 800, res = 300)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
#nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
#edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add dynamic title
title(main = paste("Mean Compliance Scenario 2 Open Access Rounds ", R ," to ", N),line = 3.5, cex.main = 0.8)
# Close the PDF device
dev.off()
R<-5 # From which round to start
# Loop through N from 1 to 8
for (N in (R+1):8) {
# Subset variables dynamically
variable_subset <- df[, grep("^T2juegoalgas\\.\\d+\\.player\\.T2_extraccion_metat$", names(df))]
variable_subset <- variable_subset[, R:N]  # Select columns for current N
# Calculate the row-wise mean for selected columns
df$average_extraction_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_ini <- 1 - (df$average_extraction_ini / 50)
# Belief compliance
df$belief_compliance_pm <- 1 - (df$beliefsT2inicial.1.player.T2_belief_caleta_conocida_mean_ini / 50)
df$belief_compliance_union <- 1 - (df$beliefsT1inicial.1.player.T1_belief_caleta_en_libre_ini / 50)
# Observed compliance
variable_subset <- df[, grep("T2juegoalgas\\.(\\d+)\\.player\\..+_extraccion_otros_metat$", names(df))]
variable_subset <- variable_subset[, R:N-1]
df$average_extraction_observed_ini <- rowMeans(variable_subset, na.rm = TRUE)
df$average_compliance_observed_ini_lag <- 1 - (df$average_extraction_observed_ini / 150)
}
# Specify the SEM model
sem_model <- '
# Relationships for beliefs
belief_compliance_pm  ~  survey2.1.player.confianza_caleta_conocida_mean + survey2.1.player.conflicto_caleta_conocida_mean
belief_compliance_union   ~  survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta
# Relationship for extraction
average_compliance_ini ~ belief_compliance_pm + belief_compliance_union +
survey2.1.player.confianza_caleta_conocida_mean + survey2.1.player.conflicto_caleta_conocida_mean +
survey1.1.player.confianza_caleta + survey1.1.player.conflicto_caleta  +
average_compliance_observed_ini_lag
'
#name variable so that there are comprensible
node_labels <- c(belief_compliance_pm =   "Beliefs Compl. Others" ,
belief_compliance_union =   "Beliefs Compl. Union",
average_compliance_ini = "Compliance" ,
survey2.1.player.confianza_caleta_conocida_mean  =   "Trust Others (mean)" ,
survey2.1.player.conflicto_caleta_conocida_mean =   "Conflict Others (mean)" ,
survey1.1.player.confianza_caleta =   "Trust Union",
survey1.1.player.conflicto_caleta =   "Conflict Union",
average_compliance_observed_ini_lag = "Observed Compliance (t-1)"
)
# Fit the SEM model
fit <- sem(sem_model, data = df)
# Extract path results and edge colors dynamically
path_results <- parameterEstimates(fit, standardized = TRUE)
regression_paths <- path_results[path_results$op == "~", ]
param_labels <- paste(regression_paths$lhs, regression_paths$op, regression_paths$rhs, sep = " ")
edge_colors_map <- setNames(ifelse(regression_paths$pvalue < 0.05, "black", "red"), param_labels)
edge_colors <- ifelse(regression_paths$pvalue < 0.05, "black", "red")
# Ensure edge_colors matches the number of paths
n_edges <- length(regression_paths$lhs)
if (length(edge_colors) < n_edges) {
edge_colors <- c(edge_colors, rep("gray", n_edges - length(edge_colors)))
}
# Save each SEM plot with a dynamic filename
output_file <- paste0(path_github, "Outputs/SEM_compliance_OA_T2_plot_Rounds_", R, "_to_", N, ".png")
png(output_file, width = 1200, height = 800, res = 300)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add dynamic title
title(main = paste("Mean Compliance Scenario 2 Open Access Rounds ", R ," to ", N),line = 3.5, cex.main = 0.8)
# Close the PDF device
dev.off()
# End of script
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add dynamic title
title(main = paste("Mean Compliance Scenario 2 Open Access Rounds ", R ," to ", N),line = 3.5, cex.main = 0.6)
# Save each SEM plot with a dynamic filename
output_file <- paste0(path_github, "Outputs/SEM_compliance_OA_T2_plot_Rounds_", R, "_to_", N, ".png")
png(output_file, width = 1200, height = 800, res = 300)
# Generate SEM plot
semPaths(
fit,
what = "std",
layout = "tree",
edge.label.cex = 1,
nodeLabels = node_labels,
sizeMan = 9,
label.cex = 1,
node.width = 2,
node.height = 0.7,
shapeMan = "ellipse",
edge.color = edge_colors,
residuals = FALSE,
intercepts = FALSE,
optimizeLatRes = TRUE,
fade = FALSE
)
# Add dynamic title
title(main = paste("Mean Compliance Scenario 2 Open Access Rounds ", R ," to ", N),line = 3.5, cex.main = 0.6)
# Close the PDF device
dev.off()
names(df)
install.packages("summarytools")
install.packages("kableExtra")
library(dplyr)
library(summarytools)
library(kableExtra)
# Select relevant variables
selected_vars <- c("survey3.1.player.payoff",
"survey3.1.player.sexo",
"survey3.1.player.nacimiento",
"survey3.1.player.estudios",
"survey3.1.player.horas_trabajo",
"survey3.1.player.liderazgo",
"survey3.1.player.experiencia",
"survey3.1.player.motivinstrum_amerb",
"survey3.1.player.motivinstrum_libre",
"survey3.1.player.motivlegit_amerb",
"survey3.1.player.motivlegit_libre",
"survey3.1.player.awareness_amerb",
"survey3.1.player.awareness_libre")
df_selected <- df %>% select(all_of(selected_vars))
# Generate summary statistics
summary_stats <- df_selected %>%
descr(stats = c("mean", "sd", "min", "max", "med", "iqr"), transpose = TRUE) %>%
as.data.frame()
View(summary_stats)
# Select relevant categorical variables
selected_categorical_vars <- c("survey3.1.player.sexo",
"survey3.1.player.estudios",
"survey3.1.player.horas_trabajo",
"survey3.1.player.liderazgo",
"survey3.1.player.experiencia")
# Generate and print proportion tables
for (var in selected_categorical_vars) {
cat("\nProportion Table for:", var, "\n")
print(round(prop.table(table(df[[var]])) * 100, 2))  # Convert to percentage and round
cat("\n-----------------------------\n")
}
age<-2024-df$survey3.1.player.nacimiento
summary(age)
summary(df$survey3.1.player.horas_trabajo)
summary(df$survey3.1.player.horas_trabajo)
sd(df$survey3.1.player.horas_trabajo)
age<-2024-df$survey3.1.player.nacimiento
summary(age)
sd(age)
prop.table(table(df$survey3.1.player.experiencia))
prop.table(table(df$survey3.1.player.estudios))
