vjust = -1.3,
size = 5) +
# Custom colors (Grouping by treatment)
scale_fill_manual(values = c("Unknown Outsiders" = "#3F4A8A", "Known Outsiders" ="#6CCE5A"),
labels = c("Unknown Outsiders", "Known Outsiders")) +
# Labels
labs(title = "",
y = "Compliance",
x = "Management System",
fill = "Scenario") +
# Y-axis settings
scale_y_continuous(limits = c(0, 1), expand = c(0, 0), breaks = seq(0, 1, by = 0.1)) +
# Theme
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 14)
)
# Print the updated plot
print(p)
# Function to calculate mean and confidence intervals
calculate_mean_ci <- function(x, conf_level = 0.95) {
n <- sum(!is.na(x)) # Count non-NA values
mean_x <- mean(x, na.rm = TRUE) # Compute mean
se_x <- sd(x, na.rm = TRUE) / sqrt(n) # Standard Error
ci_margin <- qt(conf_level + (1 - conf_level) / 2, df = n - 1) * se_x # CI margin
return(data.frame(mean = mean_x, lower_ci = mean_x - ci_margin, upper_ci = mean_x + ci_margin))
}
# Compute means and confidence intervals by treatment
means_ci_by_treatment <- dfs_long %>%
group_by(treatment) %>%
summarise(
amerb_mean = mean(compliance_extraction_amerb, na.rm = TRUE),
amerb_lower_ci = calculate_mean_ci(compliance_extraction_amerb)$lower_ci,
amerb_upper_ci = calculate_mean_ci(compliance_extraction_amerb)$upper_ci,
OA_mean = mean(compliance_extraction_OA, na.rm = TRUE),
OA_lower_ci = calculate_mean_ci(compliance_extraction_OA)$lower_ci,
OA_upper_ci = calculate_mean_ci(compliance_extraction_OA)$upper_ci
) %>%
pivot_longer(cols = -treatment, names_to = c("variable", "stat"), names_sep = "_", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value)
# Update variable names for proper labeling
means_ci_by_treatment$variable <- recode(means_ci_by_treatment$variable,
"amerb" = "TURF",
"OA" = "Open Access")
means_ci_by_treatment$variable <- factor(means_ci_by_treatment$variable,
levels = c("TURF", "Open Access"))
means_ci_by_treatment$treatment <- recode(means_ci_by_treatment$treatment,
"T1" = "Unknown Outsiders",
"T2" = "Known Outsiders")
means_ci_by_treatment$treatment <- factor(means_ci_by_treatment$treatment,
levels = c("Unknown Outsiders", "Known Outsiders"))
# Adjust bar position by grouping variable first
p <- ggplot(means_ci_by_treatment, aes(x = variable, y = mean, fill = treatment)) +
# Bar plot
geom_bar(stat = "identity", position = position_dodge(width = 0.8), alpha = 1) +
# Error bars
geom_errorbar(aes(ymin = lower, ymax = upper), position = position_dodge(0.8), width = 0.2) +
# Add mean values as text labels above bars
geom_text(aes(label = round(mean, 2)),
position = position_dodge(0.8),
vjust = -1.3,
size = 5) +
# Custom colors (Grouping by treatment)
scale_fill_manual(values = c("Unknown Outsiders" = "#3F4A8A", "Known Outsiders" ="#6CCE5A"),
labels = c("Unknown Outsiders", "Known Outsiders")) +
# Labels
labs(title = "",
y = "Compliance",
x = "Management System",
fill = "Scenario") +
# Y-axis settings
scale_y_continuous(limits = c(0, 1), expand = c(0, 0), breaks = seq(0, 1, by = 0.1)) +
# Theme
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 14)
)
# Print the updated plot
print(p)
# Save the figure
ggsave(file = paste0(path_github, "Outputs/compliance_per_extraction_area.png"),
plot = p, device = "png", width = 10, height = 8)
library(sf)
library(ggplot2)
library(dplyr) # For data manipulation
library(ggrepel)
rm(list=ls())
path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Geo"
install.packages("viridis")
rm(list=ls())
path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Geo"
# Paths to the shapefiles
region_shp_path <- paste0(path_datos, "/Regional.shp")
cities_shp_path <- paste0(path_datos, "/Toponimos.shp")
# Load shapefiles
regions <- st_read(region_shp_path)
cities <- st_read(cities_shp_path)
# Ensure CRS is EPSG:4326 (latitude/longitude)
regions <- st_transform(regions, crs = 4326)
cities <- st_transform(cities, crs = 4326)
# Filter for "Region de Valparaíso"
valparaiso_region <- regions[regions$Region == "Región de Valparaíso", ]
# Validate and fix region geometries if needed
if (!all(st_is_valid(valparaiso_region))) {
valparaiso_region <- st_make_valid(valparaiso_region)
}
# Filter cities within the desired region
valparaiso_cities <- cities[cities$Region == "DE VALPARAISO", ]
# Convert city names to uppercase for matching
valparaiso_cities$Nombre <- toupper(valparaiso_cities$Nombre)
# Filter cities by names and refine with additional conditions
city_patterns <- c(
"LAS CRUCES", "EL QUISCO", "ALGARROBO", "HORCÓN",
"LOS MOLLES", "ESTERO DE LA BALLENA", "CACHAGUA", "MAITENCILLO",
"PAPUDO", "VALPARAÍSO", "QUINTERO"
)
valparaiso_cities_filtered <- valparaiso_cities[
valparaiso_cities$Nombre %in% city_patterns &
!(valparaiso_cities$Clase_Topo %in% c("Elementos del Relieve", "Comuna")) &
(valparaiso_cities$Comuna != "LOS ANDES") &
!(valparaiso_cities$Nombre == "LOS MOLLES" & valparaiso_cities$Comuna != "LA LIGUA"),
]
# Add coordinates to the city dataset
city_coords <- st_coordinates(valparaiso_cities_filtered)
valparaiso_cities_filtered <- cbind(valparaiso_cities_filtered, city_coords)
#Clean up names and add duplicated for extra sessions
valparaiso_cities_filtered <- valparaiso_cities_filtered %>%
mutate(Nombre = if_else(Nombre == "ESTERO DE LA BALLENA", "LA BALLENA", Nombre))
horcon_row <- valparaiso_cities_filtered[valparaiso_cities_filtered$Nombre == "HORCÓN", ]
horcon_row <- horcon_row %>%
mutate(Nombre = "HORCÓN 2")
quintero_row <- valparaiso_cities_filtered[valparaiso_cities_filtered$Nombre == "QUINTERO", ]
quintero_row <- quintero_row %>%
mutate(Nombre = "QUINTERO EL MANZANO")
valparaiso_cities_filtered <- bind_rows(valparaiso_cities_filtered, horcon_row, quintero_row)
# Jitter coordinates for overlapping points
set.seed(123) # Ensure reproducibility
valparaiso_cities_filtered <- valparaiso_cities_filtered %>%
mutate(
X_jitter = X + rnorm(n(), mean = 0, sd = 0.02), # Increased jitter range
Y_jitter = Y + rnorm(n(), mean = 0, sd = 0.02)
)
# Assign colors to each city name
valparaiso_cities_filtered <- valparaiso_cities_filtered %>%
mutate(Color = case_when(
Nombre %in% c("LAS CRUCES", "EL QUISCO") ~ "Session 1 and 2",
Nombre %in% c("ALGARROBO", "HORCÓN") & !duplicated(Nombre) ~ "Session 3",
Nombre %in% c("VALPARAÍSO", "QUINTERO", "QUINTERO EL MANZANO") ~ "Session 4",
Nombre %in% c("LOS MOLLES", "LA BALLENA", "PAPUDO") ~ "Session 5",
Nombre %in% c("HORCÓN 2", "CACHAGUA", "MAITENCILLO") ~ "Session 6"
))
#table(valparaiso_cities_filtered$Nombre)
# Calculate the last third of the x-axis range
x_min <- st_bbox(valparaiso_region)$xmin
x_max <- st_bbox(valparaiso_region)$xmax
x_last_bit <- c(x_min + 9.5 * (x_max - x_min) / 10, x_max)
# Calculate the first quarter of the y-axis range
y_min <- st_bbox(valparaiso_region)$ymin
y_max <- st_bbox(valparaiso_region)$ymax
y_first_quarter <- c(y_min, y_min + (y_max - y_min) / 4)
# Convert Color to a factor for better control over color mapping
valparaiso_cities_filtered$Color <- factor(valparaiso_cities_filtered$Color,
levels = c(
"Session 1 and 2",
"Session 3",
"Session 4",
"Session 5",
"Session 6"
))
library(viridis)
ggplot() +
# Plot filtered region polygons only
geom_sf(data = valparaiso_region, fill = "wheat1", color = "black") +
# Plot filtered city points with colors
geom_point(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, color = Color),
size = 2
) +
# Annotate city names using geom_text_repel (no box, colored text)
geom_text_repel(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, label = Nombre, color = Color),
size = 3, # Text size
fontface = "bold", # Bold text
show.legend = FALSE,
box.padding = 0.5, # Padding around text for clearer spacing
point.padding = 0.5, # Padding around points
segment.color = "grey50" # Line color for segments
) +
# Add zoomed limits for the last 1/3 of the x-axis and last 1/4 of the y-axis
coord_sf(xlim = x_last_bit, ylim = y_first_quarter) +
# Apply Viridis color palette
scale_color_viridis_d(option = "viridis") +  # Use "viridis", "magma", "plasma", etc.
# Add labels and minimal theme
labs(
title = "Locations included in the sample",
x = "Longitude",
y = "Latitude",
color = "Sessions"
) +
# Customize text elements for larger, bold font
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5), # Title
axis.title = element_text(size = 14, face = "bold"), # Axis titles
axis.text = element_text(size = 12), # Axis text
legend.title = element_text(size = 12, face = "bold"), # Legend title
legend.text = element_text(size = 12) # Legend text
)
ggplot() +
# Plot filtered region polygons only with pale gray background
geom_sf(data = valparaiso_region, fill = "gray90", color = "black") +
# Plot filtered city points with colors
geom_point(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, color = Color),
size = 2
) +
# Annotate city names using geom_text_repel (no box, colored text)
geom_text_repel(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, label = Nombre, color = Color),
size = 3, # Text size
fontface = "bold", # Bold text
show.legend = FALSE,
box.padding = 0.5, # Padding around text for clearer spacing
point.padding = 0.5, # Padding around points
segment.color = "grey50" # Line color for segments
) +
# Add zoomed limits for the last 1/3 of the x-axis and last 1/4 of the y-axis
coord_sf(xlim = x_last_bit, ylim = y_first_quarter) +
# Apply a Viridis palette that avoids very light yellow
scale_color_viridis_d(option = "inferno", begin = 0.2, end = 0.8) +
# Options: "inferno", "plasma", "cividis" (avoids light yellow)
# Add labels and minimal theme
labs(
title = "Locations included in the sample",
x = "Longitude",
y = "Latitude",
color = "Sessions"
) +
# Customize text elements for larger, bold font
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5), # Title
axis.title = element_text(size = 14, face = "bold"), # Axis titles
axis.text = element_text(size = 12), # Axis text
legend.title = element_text(size = 12, face = "bold"), # Legend title
legend.text = element_text(size = 12) # Legend text
)
ggplot() +
# Plot filtered region polygons only with pale gray background
geom_sf(data = valparaiso_region, fill = "gray90", color = "black") +
# Plot filtered city points with colors
geom_point(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, color = Color),
size = 2
) +
# Annotate city names using geom_text_repel (no box, colored text)
geom_text_repel(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, label = Nombre, color = Color),
size = 3, # Text size
fontface = "bold", # Bold text
show.legend = FALSE,
box.padding = 0.5, # Padding around text for clearer spacing
point.padding = 0.5, # Padding around points
segment.color = "grey50" # Line color for segments
) +
# Add zoomed limits for the last 1/3 of the x-axis and last 1/4 of the y-axis
coord_sf(xlim = x_last_bit, ylim = y_first_quarter) +
# Apply a Viridis palette that avoids very light yellow
scale_color_viridis_d(begin = 0.2, end = 0.8) +
# Options: "inferno", "plasma", "cividis" (avoids light yellow)
# Add labels and minimal theme
labs(
title = "Locations included in the sample",
x = "Longitude",
y = "Latitude",
color = "Sessions"
) +
# Customize text elements for larger, bold font
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5), # Title
axis.title = element_text(size = 14, face = "bold"), # Axis titles
axis.text = element_text(size = 12), # Axis text
legend.title = element_text(size = 12, face = "bold"), # Legend title
legend.text = element_text(size = 12) # Legend text
)
ggplot() +
# Plot filtered region polygons only with pale gray background
geom_sf(data = valparaiso_region, fill = "gray90", color = "black") +
# Plot filtered city points with colors
geom_point(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, color = Color),
size = 2
) +
# Annotate city names using geom_text_repel (no box, colored text)
geom_text_repel(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, label = Nombre, color = Color),
size = 3, # Text size
fontface = "bold", # Bold text
show.legend = FALSE,
box.padding = 0.5, # Padding around text for clearer spacing
point.padding = 0.5, # Padding around points
segment.color = "grey50" # Line color for segments
) +
# Add zoomed limits for the last 1/3 of the x-axis and last 1/4 of the y-axis
coord_sf(xlim = x_last_bit, ylim = y_first_quarter) +
# Apply a Viridis palette that avoids very light yellow
scale_color_viridis_d(begin = 0, end = 0.8) +
# Options: "inferno", "plasma", "cividis" (avoids light yellow)
# Add labels and minimal theme
labs(
title = "Locations included in the sample",
x = "Longitude",
y = "Latitude",
color = "Sessions"
) +
# Customize text elements for larger, bold font
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5), # Title
axis.title = element_text(size = 14, face = "bold"), # Axis titles
axis.text = element_text(size = 12), # Axis text
legend.title = element_text(size = 12, face = "bold"), # Legend title
legend.text = element_text(size = 12) # Legend text
)
ggplot() +
# Plot filtered region polygons only with pale gray background
geom_sf(data = valparaiso_region, fill = "gray90", color = "black") +
# Plot filtered city points with colors
geom_point(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, color = Color),
size = 2
) +
# Annotate city names using geom_text_repel (no box, colored text)
geom_text_repel(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, label = Nombre, color = Color),
size = 3, # Text size
fontface = "bold", # Bold text
show.legend = FALSE,
box.padding = 0.5, # Padding around text for clearer spacing
point.padding = 0.5, # Padding around points
segment.color = "grey50" # Line color for segments
) +
# Add zoomed limits for the last 1/3 of the x-axis and last 1/4 of the y-axis
coord_sf(xlim = x_last_bit, ylim = y_first_quarter) +
# Apply a Viridis palette that avoids very light yellow
scale_color_viridis_d(begin = 0, end = 0.9) +
# Options: "inferno", "plasma", "cividis" (avoids light yellow)
# Add labels and minimal theme
labs(
title = "Locations included in the sample",
x = "Longitude",
y = "Latitude",
color = "Sessions"
) +
# Customize text elements for larger, bold font
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5), # Title
axis.title = element_text(size = 14, face = "bold"), # Axis titles
axis.text = element_text(size = 12), # Axis text
legend.title = element_text(size = 12, face = "bold"), # Legend title
legend.text = element_text(size = 12) # Legend text
)
rm(list=ls())
path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Geo"
# Paths to the shapefiles
region_shp_path <- paste0(path_datos, "/Regional.shp")
cities_shp_path <- paste0(path_datos, "/Toponimos.shp")
# Load shapefiles
regions <- st_read(region_shp_path)
cities <- st_read(cities_shp_path)
# Ensure CRS is EPSG:4326 (latitude/longitude)
regions <- st_transform(regions, crs = 4326)
cities <- st_transform(cities, crs = 4326)
# Filter for "Region de Valparaíso"
valparaiso_region <- regions[regions$Region == "Región de Valparaíso", ]
# Validate and fix region geometries if needed
if (!all(st_is_valid(valparaiso_region))) {
valparaiso_region <- st_make_valid(valparaiso_region)
}
# Filter cities within the desired region
valparaiso_cities <- cities[cities$Region == "DE VALPARAISO", ]
# Convert city names to uppercase for matching
valparaiso_cities$Nombre <- toupper(valparaiso_cities$Nombre)
# Filter cities by names and refine with additional conditions
city_patterns <- c(
"LAS CRUCES", "EL QUISCO", "ALGARROBO", "HORCÓN",
"LOS MOLLES", "ESTERO DE LA BALLENA", "CACHAGUA", "MAITENCILLO",
"PAPUDO", "VALPARAÍSO", "QUINTERO"
)
valparaiso_cities_filtered <- valparaiso_cities[
valparaiso_cities$Nombre %in% city_patterns &
!(valparaiso_cities$Clase_Topo %in% c("Elementos del Relieve", "Comuna")) &
(valparaiso_cities$Comuna != "LOS ANDES") &
!(valparaiso_cities$Nombre == "LOS MOLLES" & valparaiso_cities$Comuna != "LA LIGUA"),
]
# Add coordinates to the city dataset
city_coords <- st_coordinates(valparaiso_cities_filtered)
valparaiso_cities_filtered <- cbind(valparaiso_cities_filtered, city_coords)
#Clean up names and add duplicated for extra sessions
valparaiso_cities_filtered <- valparaiso_cities_filtered %>%
mutate(Nombre = if_else(Nombre == "ESTERO DE LA BALLENA", "LA BALLENA", Nombre))
horcon_row <- valparaiso_cities_filtered[valparaiso_cities_filtered$Nombre == "HORCÓN", ]
horcon_row <- horcon_row %>%
mutate(Nombre = "HORCÓN 2")
quintero_row <- valparaiso_cities_filtered[valparaiso_cities_filtered$Nombre == "QUINTERO", ]
quintero_row <- quintero_row %>%
mutate(Nombre = "QUINTERO EL MANZANO")
valparaiso_cities_filtered <- bind_rows(valparaiso_cities_filtered, horcon_row, quintero_row)
# Jitter coordinates for overlapping points
set.seed(123) # Ensure reproducibility
valparaiso_cities_filtered <- valparaiso_cities_filtered %>%
mutate(
X_jitter = X + rnorm(n(), mean = 0, sd = 0.02), # Increased jitter range
Y_jitter = Y + rnorm(n(), mean = 0, sd = 0.02)
)
# Assign colors to each city name
valparaiso_cities_filtered <- valparaiso_cities_filtered %>%
mutate(Color = case_when(
Nombre %in% c("LAS CRUCES", "EL QUISCO") ~ "Session 1 and 2",
Nombre %in% c("ALGARROBO", "HORCÓN") & !duplicated(Nombre) ~ "Session 3",
Nombre %in% c("VALPARAÍSO", "QUINTERO", "QUINTERO EL MANZANO") ~ "Session 4",
Nombre %in% c("LOS MOLLES", "LA BALLENA", "PAPUDO") ~ "Session 5",
Nombre %in% c("HORCÓN 2", "CACHAGUA", "MAITENCILLO") ~ "Session 6"
))
#table(valparaiso_cities_filtered$Nombre)
# Calculate the last third of the x-axis range
x_min <- st_bbox(valparaiso_region)$xmin
x_max <- st_bbox(valparaiso_region)$xmax
x_last_bit <- c(x_min + 9.5 * (x_max - x_min) / 10, x_max)
# Calculate the first quarter of the y-axis range
y_min <- st_bbox(valparaiso_region)$ymin
y_max <- st_bbox(valparaiso_region)$ymax
y_first_quarter <- c(y_min, y_min + (y_max - y_min) / 4)
# Convert Color to a factor for better control over color mapping
valparaiso_cities_filtered$Color <- factor(valparaiso_cities_filtered$Color,
levels = c(
"Session 1 and 2",
"Session 3",
"Session 4",
"Session 5",
"Session 6"
))
p<-ggplot() +
# Plot filtered region polygons only with pale gray background
geom_sf(data = valparaiso_region, fill = "gray90", color = "black") +
# Plot filtered city points with colors
geom_point(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, color = Color),
size = 2
) +
# Annotate city names using geom_text_repel (no box, colored text)
geom_text_repel(
data = valparaiso_cities_filtered,
aes(x = X_jitter, y = Y_jitter, label = Nombre, color = Color),
size = 3, # Text size
fontface = "bold", # Bold text
show.legend = FALSE,
box.padding = 0.5, # Padding around text for clearer spacing
point.padding = 0.5, # Padding around points
segment.color = "grey50" # Line color for segments
) +
# Add zoomed limits for the last 1/3 of the x-axis and last 1/4 of the y-axis
coord_sf(xlim = x_last_bit, ylim = y_first_quarter) +
# Apply a Viridis palette that avoids very light yellow
scale_color_viridis_d(begin = 0, end = 0.9) +
# Options: "inferno", "plasma", "cividis" (avoids light yellow)
# Add labels and minimal theme
labs(
title = "Locations included in the sample",
x = "Longitude",
y = "Latitude",
color = "Sessions"
) +
# Customize text elements for larger, bold font
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5), # Title
axis.title = element_text(size = 14, face = "bold"), # Axis titles
axis.text = element_text(size = 12), # Axis text
legend.title = element_text(size = 12, face = "bold"), # Legend title
legend.text = element_text(size = 12) # Legend text
)
print(p)
ggsave( file=paste0(path_github, "Outputs/Map_sessions.png") , plot = p, device = "png", width = 10, height = 8)
