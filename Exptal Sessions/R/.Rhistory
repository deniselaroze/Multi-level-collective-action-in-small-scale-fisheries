"average_compliance_observed_ini_lag"           = "Observed Compliance (tâˆ’1)"
)
compliance_results_SA_T2$Predictor <- factor(
sa_T2_compliance_labels[compliance_results_SA_T2$rhs],
levels = all_predictor_labels
)
# --- Belief Formation SEM for T2 (Static) ---
df$belief_compliance_pm_T2    <- 1 - df$beliefsT2inicial.1.player.T2_belief_caleta_conocida_mean_ini / 50
df$belief_compliance_union_T2 <- 1 - df$beliefsT2inicial.1.player.T2_belief_caleta_ini / 50
df$confianza_caleta<- as.numeric(scale(df$survey1.1.player.confianza_caleta))
df$conflicto_caleta<- as.numeric(scale(df$survey1.1.player.conflicto_caleta))
df$confianza_metat<- as.numeric(scale(df$survey2.1.player.confianza_caleta_conocida_mean))
df$conflicto_metat<- as.numeric(scale(df$survey2.1.player.conflicto_caleta_conocida_mean))
sem_model_beliefs_SA_T2 <- '
belief_compliance_pm_T2    ~ confianza_metat +conflicto_metat
belief_compliance_union_T2 ~ confianza_caleta + conflicto_caleta
'
# MODIFICATION: Reduced bootstrap iterations
fit_bel_SA_T2 <- sem(sem_model_beliefs_SA_T2, data = df, estimator = "ML", se = "bootstrap", bootstrap = 1000, parallel = "multicore", ncpus = 4)
pe_bel_SA_T2 <- parameterEstimates(fit_bel_SA_T2)
bel_SA_T2 <- subset(pe_bel_SA_T2, op == "~", select = c("lhs", "rhs", "est", "se", "pvalue"))
# FIX 1: Use the full, correct mapping for belief predictors
bel_SA_T2$Predictor <- factor(sa_T2_compliance_labels[bel_SA_T2$rhs], levels = all_predictor_labels)
bel_SA_T2$Outcome <- factor(c(
"belief_compliance_pm_T2"    = "Out-group (Known)",
"belief_compliance_union_T2" = "In-group (s2)"
)[bel_SA_T2$lhs])
###################################################
# --- Prepare Individual Plots for Combination ---
#################################################### Define a consistent set of labels, colors, and shapes for all plots
# Use in a ggplot2 chart:
#scale_colour_paletteer_d("ggthemes::Classic_Cyclic")
#scale_fill_paletteer_d("ggthemes::Classic_Cyclic")
#high_contrast_palette<-c("#1F83B4FF", "#12A2A8FF", "#2CA030FF", "#78A641FF","#BCBD22FF", "#FFBF50FF", "#FFAA0EFF","#FF7F0EFF", "#D63A3AFF", "#C7519CFF","#BA43B4FF","#8A60B0FF","#6F63BBFF")
#palette<-c("#1F83B4FF", "#12A2A8FF", "#2CA030FF", "#78A641FF","#BCBD22FF",  "#D63A3AFF","#8A60B0FF", "#FFAA0EFF")
high_contrast_palette<-c( "#D63A3AFF","#8A60B0FF", "#FFAA0EFF","#1F83B4FF", "#12A2A8FF", "#2CA030FF", "#78A641FF","#BCBD22FF" )
predictor_colors <- setNames(
high_contrast_palette,
all_predictor_labels
)
# MODIFICATION: Added shape palette
predictor_shapes <- setNames(
c(8, 3, 4, 18, 15, 17, 16),
#c(16, 17, 15, 18, 4, 3, 8),
all_predictor_labels
)
# --- Plot A: Dynamic Compliance T1 (Unknown) ---
pd <- position_dodge(width = 0.6)
p_compliance_T1 <- ggplot(compliance_results_SA, aes(x = est, y = label, group = Predictor)) +
# FIX 2: Add size mapping for bolder lines AND make height consistent
geom_errorbarh(aes(xmin = est - 1.96 * se, xmax = est + 1.96 * se, color = Predictor, alpha = Significance, size = Significance), height = 0.0, position = pd) +
geom_point(aes(color = Predictor, shape = Predictor, alpha = Significance), position = pd, size = 3) +
geom_text(data = subset(compliance_results_SA, Significance == "p < 0.05"),
aes(label = round(est, 2)),
position = pd,
vjust = -1,
size = 6,
show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
# FIX 3: Set consistent X-axis limits
coord_cartesian(xlim = c(-0.3, 0.6)) +
scale_color_manual(values = predictor_colors, name = "Predictor", drop = FALSE) +
scale_shape_manual(values = predictor_shapes, name = "Predictor", drop = FALSE) +
scale_alpha_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.2), guide = "none") +
# Add size scale for thicker lines
scale_size_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.5), guide = "none") +
scale_y_discrete(limits = rev(levels(compliance_results_SA$label))) +
labs(
title = "a.1) Compliance Shared Area (s1 - Unknown Out-group)",
x = NULL, # Remove individual x-axis titles
y = "Time Period"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 1, size = 22, face = "bold"),
legend.position = "none",
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
plot.margin = margin(b = 40)
)
# --- Plot B: Dynamic Compliance T2 (Known) ---
p_compliance_T2 <- ggplot(compliance_results_SA_T2, aes(x = est, y = label, group = Predictor)) +
# FIX 2: Add size mapping for bolder lines AND make height consistent
geom_errorbarh(aes(xmin = est - 1.96 * se, xmax = est + 1.96 * se, color = Predictor, alpha = Significance, size = Significance), height = 0.0, position = pd) +
geom_point(aes(color = Predictor, shape = Predictor, alpha = Significance), position = pd, size = 3) +
geom_text(data = subset(compliance_results_SA_T2, Significance == "p < 0.05"),
aes(label = round(est, 2)),
position = pd,
vjust = -1,
size = 6,
show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
# FIX 3: Set consistent X-axis limits
coord_cartesian(xlim = c(-0.3, 0.6)) +
scale_color_manual(values = predictor_colors, name = "Predictor", drop = FALSE) +
scale_shape_manual(values = predictor_shapes, name = "Predictor", drop = FALSE) +
scale_alpha_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.2), guide = "none") +
# Add size scale for thicker lines
scale_size_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.5), guide = "none") +
scale_y_discrete(limits = rev(levels(compliance_results_SA_T2$label))) +
labs(
title = "a.2) Compliance Shared Area (s2 - Known Out-group)",
x = NULL,
y = ""
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 1, size=22, face = "bold"),
legend.position = "none",
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
plot.margin = margin(b = 40)
)
# --- Plot C: Beliefs Shared Area (s1 - Unknown Out-group) ---
bel_SA_T1$Significance <- ifelse(bel_SA_T1$pvalue < 0.05, "p < 0.05", "p >= 0.05")
outcome_order_s1 <- c("Out-group (Unknown)", "In-group (s1)")
bel_SA_T1$Outcome <- factor(bel_SA_T1$Outcome, levels = rev(outcome_order_s1))
p_beliefs_s1 <- ggplot(bel_SA_T1, aes(x = est, y = Outcome, color = Predictor, shape = Predictor)) +
geom_errorbarh(aes(xmin = est - 1.96 * se, xmax = est + 1.96 * se, alpha = Significance, size = Significance), height = 0.0, position = position_dodge(width = 0.6)) +
geom_point(aes(alpha = Significance), position = position_dodge(width = 0.6), size = 3) +
geom_text(data = subset(bel_SA_T1, Significance == "p < 0.05"),
aes(label = round(est, 2)),
position = pd,
vjust = -1,
size = 6,
show.legend = FALSE,
color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
coord_cartesian(xlim = c(-0.3, 0.6)) +
scale_color_manual(values = predictor_colors, name = "Predictor", drop = FALSE) +
scale_shape_manual(values = predictor_shapes, name = "Predictor", drop = FALSE) +
scale_alpha_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.2), guide = "none") +
scale_size_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.5), guide = "none") +
labs(
title = "b.1) Beliefs Shared Area (s1 - Unknown Out-group)",
x = "Beta Coefficient (95% CI)",
y = "Beliefs About"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 1, size = 22, face = "bold"),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
legend.position = "none",
plot.margin = margin(b = 40)
)
# --- Plot D: Beliefs Shared Area (s2 - Known Out-group) ---
bel_SA_T2$Significance <- ifelse(bel_SA_T2$pvalue < 0.05, "p < 0.05", "p >= 0.05")
outcome_order_s2 <- c("Out-group (Known)", "In-group (s2)")
bel_SA_T2$Outcome <- factor(bel_SA_T2$Outcome, levels = rev(outcome_order_s2))
p_beliefs_s2 <- ggplot(bel_SA_T2, aes(x = est, y = Outcome, color = Predictor, shape = Predictor)) +
geom_errorbarh(aes(xmin = est - 1.96 * se, xmax = est + 1.96 * se, alpha = Significance, size = Significance), height = 0.0, position = position_dodge(width = 0.6)) +
geom_point(aes(alpha = Significance), position = position_dodge(width = 0.6), size = 3) +
geom_text(data = subset(bel_SA_T2, Significance == "p < 0.05"),
aes(label = round(est, 2)),
position = pd,
vjust = -1,
size = 6,
show.legend = FALSE,
color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
coord_cartesian(xlim = c(-0.3, 0.6)) +
scale_color_manual(values = predictor_colors, name = "Predictor", drop = FALSE) +
scale_shape_manual(values = predictor_shapes, name = "Predictor", drop = FALSE) +
scale_alpha_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.2), guide = "none") +
scale_size_manual(values = c("p < 0.05" = 1, "p >= 0.05" = 0.5), guide = "none") +
labs(
title = "b.2) Beliefs Shared Area (s2 - Known Out-group)",
x = "Beta Coefficient (95% CI)",
y = ""
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 1, size = 22, face = "bold"),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
legend.position = "none",
plot.margin = margin(b = 40)
)
# --- Final Assembly with Manual Legend ---
# 1. Create a standalone legend plot for Predictors
predictor_legend_plot <- ggplot(data.frame(
Predictor = factor(all_predictor_labels, levels = all_predictor_labels),
est = 0, se = 1
), aes(x = est, y = Predictor, color = Predictor, shape = Predictor)) +
geom_errorbarh(aes(xmin = est - se, xmax = est + se)) +
geom_point(size = 3) +
scale_color_manual(values = predictor_colors, name = "Predictor", drop = FALSE) +
scale_shape_manual(values = predictor_shapes, name = "Predictor", drop = FALSE) +
theme_minimal() +
guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) +
theme(legend.position = "bottom",
legend.title = element_text(size = 18),
legend.text = element_text(size = 18))
# 2. Create a standalone legend plot for Significance
significance_legend_data <- data.frame(
Significance = factor(c("p < 0.05", "p >= 0.05"), levels = c("p < 0.05", "p >= 0.05"))
)
significance_legend_plot <- ggplot(significance_legend_data, aes(x = 1, y = Significance, alpha = Significance)) +
geom_point(size = 3, shape = 8, fill = "grey") +
scale_alpha_manual(name = "Significance", values = c("p < 0.05" = 1, "p >= 0.05" = 0.2)) +
theme_minimal() +
theme(legend.position = "bottom",
legend.title = element_text(size = 18),
legend.text = element_text(size = 18))
# 3. Extract legends
predictor_legend <- get_legend(predictor_legend_plot)
significance_legend <- get_legend(significance_legend_plot)
# 4. Combine the two legends side-by-side
combined_legends <- wrap_plots(predictor_legend, significance_legend, ncol = 2, widths = c(3, 1))
# 5. Arrange all plots and the combined legend
final_plot <- (p_compliance_T1 + p_compliance_T2) /
(p_beliefs_s1 + p_beliefs_s2) /
combined_legends +
plot_layout(heights = c(0.7, 0.2, 0.1)) # Give more height to legend row for spacing
# Save the final combined plot
ggsave(
paste0(path_github, "Outputs/Combined_SEM_Plot_2x2.tiff"),
final_plot,
width = 22,
height = 16
)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stargazer)
library(sandwich)   # For robust and clustered standard errors
library(lmtest)
library(lme4)
library(modelsummary)
library(tinytable)
library(rlang)
library(pandoc)
library(dplyr)
library(ggplot2)
library(viridis)
library(lavaan)
library(semPlot)
rm(list=ls())
path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
setwd(path_github)
#load(paste0(path_datos, "/Datos_islitas.Rdata"))
load(paste0(path_datos, "/Datos_islitas_recode.Rdata"))
load(paste0(path_datos, "/Datos_islitas_long.Rdata"))
View(dfs_long)
names(dfs_long)
summary_data <- dfs_long %>%
# Select just the columns we want to plot
select(extraction_amerb, extraction_OA) %>%
# Reshape data from "wide" to "long" format.
# This creates two columns: 'variable' (with names "extraction_amerb", "extraction_OA")
# and 'value' (with the corresponding numeric values).
pivot_longer(
cols = everything(),
names_to = "variable",
values_to = "value"
) %>%
# Group by the new 'variable' column to calculate stats for each
group_by(variable) %>%
# Calculate the summary statistics
summarise(
mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n()
) %>%
# Calculate the standard error and the 95% confidence interval margin
mutate(
se = sd / sqrt(n),
# qt(0.975, ...) gives the t-distribution value for 95% CI
ci_margin = qt(0.975, df = n - 1) * se,
ci_lower = mean - ci_margin,
ci_upper = mean + ci_margin
)
# Print the summary data to see the calculated stats
print(summary_data)
ggplot(summary_data, aes(x = variable, y = mean, fill = variable)) +
# Add the bars
# stat = "identity" tells ggplot to use the 'y' value (our mean) directly
geom_bar(stat = "identity", width = 0.7, color = "black", alpha = 0.8) +
# Add the confidence interval error bars
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.2,  # Width of the error bar caps
linewidth = 0.7 # Thickness of the error bar lines
) +
# Customize labels and title
labs(
title = "Mean Extraction Value with 95% Confidence Intervals",
x = "Extraction Type",
y = "Mean Value"
) +
# Use a clean theme
theme_minimal(base_size = 14) +
# Pre-set color palettes (optional)
scale_fill_brewer(palette = "Pastel1") +
# Remove the fill legend since the x-axis labels are sufficient
theme(legend.position = "none")
summary_data <- dfs_long %>%
# Select just the columns we want to plot
select(compliance_extraction_amerb, compliance_extraction_OA) %>%
# Reshape data from "wide" to "long" format.
# This creates two columns: 'variable' (with names "extraction_amerb", "extraction_OA")
# and 'value' (with the corresponding numeric values).
pivot_longer(
cols = everything(),
names_to = "variable",
values_to = "value"
) %>%
# Group by the new 'variable' column to calculate stats for each
group_by(variable) %>%
# Calculate the summary statistics
summarise(
mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n()
) %>%
# Calculate the standard error and the 95% confidence interval margin
mutate(
se = sd / sqrt(n),
# qt(0.975, ...) gives the t-distribution value for 95% CI
ci_margin = qt(0.975, df = n - 1) * se,
ci_lower = mean - ci_margin,
ci_upper = mean + ci_margin
)
# Print the summary data to see the calculated stats
print(summary_data)
# --- 2. Create the Plot ---
ggplot(summary_data, aes(x = variable, y = mean, fill = variable)) +
# Add the bars
# stat = "identity" tells ggplot to use the 'y' value (our mean) directly
geom_bar(stat = "identity", width = 0.7, color = "black", alpha = 0.8) +
# Add the confidence interval error bars
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.2,  # Width of the error bar caps
linewidth = 0.7 # Thickness of the error bar lines
) +
# Customize labels and title
labs(
title = "Mean Extraction Value with 95% Confidence Intervals",
x = "Extraction Type",
y = "Mean Value"
) +
# Use a clean theme
theme_minimal(base_size = 14) +
# Pre-set color palettes (optional)
scale_fill_brewer(palette = "Pastel1") +
# Remove the fill legend since the x-axis labels are sufficient
theme(legend.position = "none")
# To save the plot, you can add:
# ggsave("extraction_plot.png", width = 8, height = 6)
ggplot(summary_data, aes(x = variable, y = mean, fill = variable)) +
# Add the bars
# stat = "identity" tells ggplot to use the 'y' value (our mean) directly
geom_bar(stat = "identity", width = 0.7, color = "black", alpha = 0.8) +
# Add the confidence interval error bars
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.2,  # Width of the error bar caps
linewidth = 0.7 # Thickness of the error bar lines
) +
# Customize labels and title
labs(
title = "",
x = "Area",
y = "Mean compliance"
) +
scale_x_discrete(
labels = c("extraction_amerb" = "TURF", "extraction_OA" = "Shared Area")
) +
# Use a clean theme
theme_minimal(base_size = 14) +
# Pre-set color palettes (optional)
scale_fill_brewer(palette = "Pastel1") +
# Remove the fill legend since the x-axis labels are sufficient
theme(legend.position = "none")
# To save the plot, you can add:
# ggsave("extraction_plot.png", width = 8, height = 6)
ggsave(
paste0(path_github, "Outputs/mean_extraction_plot.png"),
width = 8,
height = 6
)
summary_data <- dfs_long %>%
# Select just the columns we want to plot
select(compliance_extraction_amerb, compliance_extraction_OA) %>%
# Reshape data from "wide" to "long" format.
# This creates two columns: 'variable' (with names "extraction_amerb", "extraction_OA")
# and 'value' (with the corresponding numeric values).
pivot_longer(
cols = everything(),
names_to = "variable",
values_to = "value"
) %>%
# Group by the new 'variable' column to calculate stats for each
group_by(variable) %>%
# Calculate the summary statistics
summarise(
mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n()
) %>%
# Calculate the standard error and the 95% confidence interval margin
mutate(
se = sd / sqrt(n),
# qt(0.975, ...) gives the t-distribution value for 95% CI
ci_margin = qt(0.975, df = n - 1) * se,
ci_lower = mean - ci_margin,
ci_upper = mean + ci_margin
)
# Print the summary data to see the calculated stats
print(summary_data)
# --- 2. Create the Plot ---
ggplot(summary_data, aes(x = variable, y = mean, fill = variable)) +
# Add the bars
# stat = "identity" tells ggplot to use the 'y' value (our mean) directly
geom_bar(stat = "identity", width = 0.7, color = "black", alpha = 0.8) +
# Add the confidence interval error bars
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.2,  # Width of the error bar caps
linewidth = 0.7 # Thickness of the error bar lines
) +
# Customize labels and title
labs(
title = "",
x = "Area",
y = "Mean compliance"
) +
scale_x_discrete(
labels = c("compliance_extraction_amerb" = "TURF", "compliance_extraction_OA" = "Shared Area")
) +
# Use a clean theme
theme_minimal(base_size = 14) +
# Pre-set color palettes (optional)
scale_fill_brewer(palette = "Pastel1") +
# Remove the fill legend since the x-axis labels are sufficient
theme(legend.position = "none")
# To save the plot, you can add:
# ggsave("extraction_plot.png", width = 8, height = 6)
ggsave(
paste0(path_github, "Outputs/mean_extraction_plot.png"),
width = 8,
height = 6
)
ggplot(summary_data, aes(x = variable, y = mean, fill = variable)) +
# Add the bars
# stat = "identity" tells ggplot to use the 'y' value (our mean) directly
geom_bar(stat = "identity", width = 0.7, color = "black", alpha = 0.8) +
# Add the confidence interval error bars
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.2,  # Width of the error bar caps
linewidth = 0.7 # Thickness of the error bar lines
) +
# Customize labels and title
labs(
title = "",
x = "Area",
y = "Mean compliance"
) +
scale_x_discrete(
labels = c("compliance_extraction_amerb" = "TURF", "compliance_extraction_OA" = "Shared Area")
) +
# Use a clean theme
theme_minimal(base_size = 14) +
coord_cartesian(ylim = c(0, 1)) +
# Pre-set color palettes (optional)
scale_fill_brewer(palette = "Pastel1") +
# Remove the fill legend since the x-axis labels are sufficient
theme(legend.position = "none")
# To save the plot, you can add:
# ggsave("extraction_plot.png", width = 8, height = 6)
ggsave(
paste0(path_github, "Outputs/mean_extraction_plot.png"),
width = 8,
height = 6
)
ggplot(summary_data, aes(x = variable, y = mean, fill = variable)) +
# Add the bars
# stat = "identity" tells ggplot to use the 'y' value (our mean) directly
geom_bar(stat = "identity", width = 0.7, color = "black", alpha = 0.8) +
# Add the confidence interval error bars
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.2,  # Width of the error bar caps
linewidth = 0.7 # Thickness of the error bar lines
) +
# Customize labels and title
labs(
title = "",
x = "Area",
y = "Mean compliance"
) +
scale_x_discrete(
labels = c("compliance_extraction_amerb" = "TURF", "compliance_extraction_OA" = "Shared Area")
) +
# Use a clean theme
theme_minimal(base_size = 14) +
coord_cartesian(ylim = c(0, 1)) +
# Pre-set color palettes (optional)
scale_fill_brewer(palette = "Pastel1") +
# Remove the fill legend since the x-axis labels are sufficient
theme(legend.position = "none")
# To save the plot, you can add:
# ggsave("extraction_plot.png", width = 8, height = 6)
ggsave(
paste0(path_github, "Outputs/mean_extraction_plot.pdf"),
width = 8,
height = 6
)
