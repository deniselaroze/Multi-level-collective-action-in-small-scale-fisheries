names(s1) <- names
s1 <- make_variable_character(s1)  # Ensure Variable is character
# Perform Chi-squared test for Gender
contingency_table <- xtabs(N ~ Variable + Treatment, data = s1)
chi.s1 <- chisq.test(contingency_table)
# Summarize the data for Financial Literacy and Treatments
s2 <- df %>%
group_by(financial_lit_b, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s2) <- names
s2 <- s2[-c(13:16), ]  # Remove extra
neous rows
# Define consistent column names
names <- c("Variable", "Treatment", "N")
# Function to ensure consistent Variable type (character)
make_variable_character <- function(df) {
df$Variable <- as.character(df$Variable)
return(df)
}
# Summarize the data for Gender and Treatments
s1 <- df %>%
group_by(Gender, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s1) <- names
s1 <- make_variable_character(s1)  # Ensure Variable is character
# Perform Chi-squared test for Gender
contingency_table <- xtabs(N ~ Variable + Treatment, data = s1)
chi.s1 <- chisq.test(contingency_table)
# Summarize the data for Financial Literacy and Treatments
s2 <- df %>%
group_by(financial_lit_b, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s2) <- names
s2 <- s2[-c(13:16), ]  # Remove extra
s2 <- make_variable_character(s2)  # Ensure Variable is character
# Perform Chi-squared test for Financial Literacy
contingency_table <- xtabs(N ~ Variable + Treatment, data = s2)
chi.s2 <- chisq.test(contingency_table)
# Summarize the data for Education and Treatments
s3 <- df %>%
group_by(educ_eng, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s3) <- names
s3 <- make_variable_character(s3)  # Ensure Variable is character
# Perform Chi-squared test for Education
contingency_table <- xtabs(N ~ Variable + Treatment, data = s3)
chi.s3 <- chisq.test(contingency_table)
# Summarize the data for Health and Treatments
s4 <- df %>%
group_by(private_health, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s4) <- names
s4 <- make_variable_character(s4)  # Ensure Variable is character
# Perform Chi-squared test for Health
contingency_table <- xtabs(N ~ Variable + Treatment, data = s4)
chi.s4 <- chisq.test(contingency_table)
# Summarize data for Age (mean and SD)
s5 <- df %>%
group_by(Treatments) %>%
summarise(
Age_mean = round(mean(Age, na.rm = TRUE), 2),
Age_sd = round(sd(Age, na.rm = TRUE), 2),
.groups = "drop"
) %>%
pivot_longer(cols = c(Age_mean, Age_sd), names_to = "Variable", values_to = "Value") %>%
pivot_wider(names_from = Treatments, values_from = Value)
s5 <- make_variable_character(s5)  # Ensure Variable is character
# Combine summaries into a single table
tbl <- bind_rows(s1, s2, s3, s4, s5)
# Pivot table to wide format for summary
tbl_wide <- tbl %>%
group_by(Variable, Treatment) %>%  # Ensure no duplicates within Variable and Treatment
summarise(N = sum(N, na.rm = TRUE), .groups = "drop") %>%  # Aggregate duplicates
pivot_wider(
names_from = Treatment,
values_from = N,
names_repair = "unique"  # Automatically make column names unique if duplicates exist
) %>%
mutate(Total = rowSums(across(where(is.numeric)), na.rm = TRUE))
# Add percentages for each Treatment group
tbl_wide <- tbl_wide %>%
mutate(
`% Baseline` = round(Baseline / Total, 4) * 100,
`% Profile` = round(Perfil / Total, 4) * 100,
`% Video` = round(Video / Total, 4) * 100,
`% Profile and Video` = round(VideoPerfil / Total, 4) * 100
)
# Pivot table to wide format for summary
tbl_wide <- tbl %>%
group_by(Variable, Treatment) %>%  # Ensure no duplicates within Variable and Treatment
summarise(N = sum(N, na.rm = TRUE), .groups = "drop") %>%  # Aggregate duplicates
pivot_wider(
names_from = Treatment,
values_from = N,
names_repair = "unique"  # Automatically make column names unique if duplicates exist
) %>%
mutate(Total = rowSums(across(where(is.numeric)), na.rm = TRUE))
# Add percentages for each Treatment group
tbl_wide <- tbl_wide %>%
mutate(
`% Baseline` = round(Baseline / Total, 4) * 100,
`% Profile` = round(Perfil / Total, 4) * 100,
`% Video` = round(Video / Total, 4) * 100,
`% Profile and Video` = round(VideoPerfil / Total, 4) * 100
)
# Compute p-values for all variables
p_values <- c(
chi.s1$p.value, chi.s2$p.value, chi.s3$p.value, chi.s4$p.value, NA  # NA for Age SD
)
p_values_repeated <- c(
rep(p_values[1], 2),  # s1 has two rows (Female, Male)
rep(p_values[2], 3),  # s2 has three rows (Financial Literacy)
rep(p_values[3], 3),  # s3 has three rows (Education)
rep(p_values[4], 2),  # s4 has two rows (Health)
rep(p_values[5], 2)   # s5 has two rows (Age mean and Age SD)
)
tbl_final <- tbl_wide
tbl_final$`P-value` <- round(p_values_repeated, 4)
# Add variable names to the table
tbl_final$Variable <- c(
"Female", "Male", "Low Fin. Lit.", "Mid Fin. Lit.", "High Fin. Lit.",
"Post-graduate degree", "Primary or high-school degree", "University degree",
"Public Health or other", "Private healthcare", "Age (mean)", "Age (sd)"
)
# Rename columns for final table
colnames(tbl_final) <- c(
"Variable", "Baseline", "Profile", "Video", "Profile and Video",
"Total", "% Baseline", "% Profile", "% Video", "% Profile and Video", "P-value"
)
# Export table to LaTeX
xt <- xtable(tbl_final)
#print(xt, type = "latex", file = paste0(path_github, "/Outputs/balance_numbers_lab.tex"),
#      floating = FALSE, include.rownames = FALSE)
# Clean up the environment
#rm(tbl, tbl_wide, s1, s2, s3, s4, s5, tbl_final)
# Clean up the environment
#rm(tbl, tbl_wide, s1, s2, s3, s4, s5, tbl_final)
xt
rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/Lab Data/Surveys and websites/"
df <- readRDS(paste0(path_datos, "lab_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
s1 <- df %>%
group_by( Gender, Treatments) %>%
summarise(
Gender_count = length(unique(uemail)),
)
names(s1)<-names
names<-c( "Variable",  "Treatment", "N")
# Summarize the data
s1 <- df %>%
group_by( Gender, Treatments) %>%
summarise(
Gender_count = length(unique(uemail)),
)
names(s1)<-names
print(s1)
names<-c( "Variable",  "Treatment", "N")
# Summarize the data
s1 <- df %>%
group_by( Gender, Treatments) %>%
summarise(
Gender_count = length(unique(uemail)),
)
names(s1)<-names
print(s1)
# Define consistent column names
names <- c("Variable", "Treatment", "N")
# Summarize the data for Gender and Treatments
s1 <- df %>%
group_by(Gender, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s1) <- names
# Perform Chi-squared test for Gender
contingency_table <- xtabs(N ~ Variable + Treatment, data = s1)
chi.s1 <- chisq.test(contingency_table)
chi.s1
# Summarize the data for Financial Literacy and Treatments
s2 <- df %>%
group_by(financial_lit_b, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s2) <- names
View(s2)
s2 <- s2[-c(13:16), ]  # Remove extraneous rows
# Perform Chi-squared test for Financial Literacy
contingency_table <- xtabs(N ~ Variable + Treatment, data = s2)
chi.s2 <- chisq.test(contingency_table)
chi.s2
s3 <- df %>%
group_by(educ_eng, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s3) <- names
# Perform Chi-squared test for Education
contingency_table <- xtabs(N ~ Variable + Treatment, data = s3)
chi.s3 <- chisq.test(contingency_table)
chi.s3
s4 <- df %>%
group_by(private_health, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s4) <- names
contingency_table <- xtabs(N ~ Variable + Treatment, data = s4)
chi.s4 <- chisq.test(contingency_table)
# Combine summaries into a single table
tbl <- bind_rows(s1, s2, s3, s4)
View(s1)
View(s2)
View(s3)
View(s4)
View(s3)
View(s2)
View(s1)
s11 <- make_variable_character(s1)
make_variable_character <- function(df) {
df$Variable <- as.character(df$Variable)
return(df)
}
s11 <- make_variable_character(s1)
s12 <- make_variable_character(s2)
s13 <- make_variable_character(s3)
s14 <- make_variable_character(s4)
View(s2)
View(s12)
View(s1)
View(s11)
tbl <- bind_rows(s1, s2, s3, s4)
s1 <- make_variable_character(s1)
s2 <- make_variable_character(s2)
s3 <- make_variable_character(s3)
s4 <- make_variable_character(s4)
# Combine summaries into a single table
tbl <- bind_rows(s1, s2, s3, s4)
# Pivot table to wide format for summary
tbl_wide <- tbl %>%
pivot_wider(names_from = Treatment, values_from = N) %>%
mutate(Total = rowSums(across(where(is.numeric)), na.rm = TRUE))
# Add percentages for each Treatment group
tbl_wide <- tbl_wide %>%
mutate(
`% Baseline` = round(Baseline / Total, 4) * 100,
`% Profile` = round(Perfil / Total, 4) * 100,
`% Video` = round(Video / Total, 4) * 100,
`% Profile and Video` = round(VideoPerfil / Total, 4) * 100
)
# Summarize data for Age (mean and SD)
s5 <- df %>%
group_by(Treatments) %>%
summarise(
Age_mean = round(mean(Age, na.rm = TRUE), 2),
Age_sd = round(sd(Age, na.rm = TRUE), 2),
.groups = "drop"
) %>%
pivot_longer(cols = c(Age_mean, Age_sd), names_to = "Variable", values_to = "Value") %>%
pivot_wider(names_from = Treatments, values_from = Value)
# Perform ANOVA for Age across Treatments
anova_result <- aov(Age ~ Treatments, data = df)
anova_summary <- summary(anova_result)
print(anova_summary)
p_value_anova <- anova_summary[[1]]$`Pr(>F)`[1]
# Add ANOVA p-value to Age summary
s5$p_value <- ifelse(s5$Variable == "Age_mean", round(p_value_anova, 4), NA)
# Combine Age summary with previous table
tbl_final <- bind_rows(tbl_wide, s5)
# Add variable names to the table
tbl_final$Variable <- c(
"Female", "Male", "Low Fin. Lit.", "Mid Fin. Lit.", "High Fin. Lit.",
"Post-graduate degree", "Primary or high-school degree", "University degree",
"Public Health or other", "Private healthcare", "Age (mean)", "Age (sd)"
)
# Compute p-values for all variables
p_values <- c(
chi.s1$p.value, chi.s2$p.value, chi.s3$p.value, chi.s4$p.value, NA  # NA for Age SD
)
p_values_repeated <- c(
rep(p_values[1], 2),  # s1 has two rows (Female, Male)
rep(p_values[2], 3),  # s2 has three rows (Financial Literacy)
rep(p_values[3], 3),  # s3 has three rows (Education)
rep(p_values[4], 2),  # s4 has two rows (Health)
rep(p_values[5], 2)   # s5 has two rows (Age mean and Age SD)
)
tbl_final$`P-value` <- round(p_values_repeated, 4)
# Rename columns for final table
colnames(tbl_final) <- c(
"Variable", "Baseline", "Profile", "Video", "Profile and Video",
"Total", "% Baseline", "% Profile", "% Video", "% Profile and Video", "P-value"
)
# Export table to LaTeX
xt <- xtable(tbl_final)
#print(xt, type = "latex", file = paste0(path_github, "/Outputs/balance_numbers_lab.tex"),
floating = FALSE, include.rownames = FALSE)
xt
# Define consistent column names
names <- c("Variable", "Treatment", "N")
# Summarize the data for Gender and Treatments
s1 <- df %>%
group_by(Gender, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s1) <- names
# Perform Chi-squared test for Gender
contingency_table <- xtabs(N ~ Variable + Treatment, data = s1)
chi.s1 <- chisq.test(contingency_table)
# Summarize the data for Financial Literacy and Treatments
s2 <- df %>%
group_by(financial_lit_b, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s2) <- names
s2 <- s2[-c(13:16), ]  # Remove extraneous rows
# Perform Chi-squared test for Financial Literacy
contingency_table <- xtabs(N ~ Variable + Treatment, data = s2)
chi.s2 <- chisq.test(contingency_table)
# Summarize the data for Education and Treatments
s3 <- df %>%
group_by(educ_eng, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s3) <- names
# Perform Chi-squared test for Education
contingency_table <- xtabs(N ~ Variable + Treatment, data = s3)
chi.s3 <- chisq.test(contingency_table)
# Summarize the data for Health and Treatments
s4 <- df %>%
group_by(private_health, Treatments) %>%
summarise(N = length(unique(uemail)), .groups = "drop")
names(s4) <- names
# Perform Chi-squared test for Health
contingency_table <- xtabs(N ~ Variable + Treatment, data = s4)
chi.s4 <- chisq.test(contingency_table)
# Function to ensure consistent Variable type (character)
make_variable_character <- function(df) {
df$Variable <- as.character(df$Variable)
return(df)
}
s1 <- make_variable_character(s1)
s2 <- make_variable_character(s2)
s3 <- make_variable_character(s3)
s4 <- make_variable_character(s4)
# Combine summaries into a single table
tbl <- bind_rows(s1, s2, s3, s4)
# Pivot table to wide format for summary
tbl_wide <- tbl %>%
pivot_wider(names_from = Treatment, values_from = N) %>%
mutate(Total = rowSums(across(where(is.numeric)), na.rm = TRUE))
# Add percentages for each Treatment group
tbl_wide <- tbl_wide %>%
mutate(
`% Baseline` = round(Baseline / Total, 4) * 100,
`% Profile` = round(Perfil / Total, 4) * 100,
`% Video` = round(Video / Total, 4) * 100,
`% Profile and Video` = round(VideoPerfil / Total, 4) * 100
)
# Summarize data for Age (mean and SD)
s5 <- df %>%
group_by(Treatments) %>%
summarise(
Age_mean = round(mean(Age, na.rm = TRUE), 2),
Age_sd = round(sd(Age, na.rm = TRUE), 2),
.groups = "drop"
) %>%
pivot_longer(cols = c(Age_mean, Age_sd), names_to = "Variable", values_to = "Value") %>%
pivot_wider(names_from = Treatments, values_from = Value)
# Perform ANOVA for Age across Treatments
anova_result <- aov(Age ~ Treatments, data = df)
anova_summary <- summary(anova_result)
print(anova_summary)
p_value_anova <- anova_summary[[1]]$`Pr(>F)`[1]
# Add ANOVA p-value to Age summary
s5$p_value <- ifelse(s5$Variable == "Age_mean", round(p_value_anova, 4), NA)
# Combine Age summary with previous table
tbl_final <- bind_rows(tbl_wide, s5)
# Add variable names to the table
tbl_final$Variable <- c(
"Female", "Male", "Low Fin. Lit.", "Mid Fin. Lit.", "High Fin. Lit.",
"Post-graduate degree", "Primary or high-school degree", "University degree",
"Public Health or other", "Private healthcare", "Age (mean)", "Age (sd)"
)
# Compute p-values for all variables
p_values <- c(
chi.s1$p.value, chi.s2$p.value, chi.s3$p.value, chi.s4$p.value, NA  # NA for Age SD
)
p_values_repeated <- c(
rep(p_values[1], 2),  # s1 has two rows (Female, Male)
rep(p_values[2], 3),  # s2 has three rows (Financial Literacy)
rep(p_values[3], 3),  # s3 has three rows (Education)
rep(p_values[4], 2),  # s4 has two rows (Health)
rep(p_values[5], 2)   # s5 has two rows (Age mean and Age SD)
)
tbl_final$`P-value` <- round(p_values_repeated, 4)
# Rename columns for final table
colnames(tbl_final) <- c(
"Variable", "Baseline", "Profile", "Video", "Profile and Video",
"Total", "% Baseline", "% Profile", "% Video", "% Profile and Video", "P-value"
)
# Export table to LaTeX
xt <- xtable(tbl_final)
print(xt, type = "latex", file = paste0(path_github, "/Outputs/balance_numbers_lab.tex"),
floating = FALSE, include.rownames = FALSE)
# Clean up the environment
rm(tbl, tbl_wide, s1, s2, s3, s4, s5, tbl_final)
library(stargazer)
library(MASS)
library(broom)
library(ggpubr)
library(naniar)
library(nnet)
library(lmtest)
library(sandwich)
rm(list=ls())
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/"
path_datos<-"C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/Data and analysis/Lab/Lab Data/Surveys and websites/"
df <- readRDS(paste0(path_datos, "lab_data.rds"))
df.f<-df[!is.na(df$correct_response),]
df.en <- readRDS(paste0(path_datos, "encuestas_clean.rds"))
path_datos <- "C:/Users/DCCS2/Dropbox/Sitios web/Datos Laboratorio/Videos/"
path_github <- "C:/Users/DCCS2/Documents/GitHub/Pensions-Website-Design/"
df<-read.csv(paste0(path_datos,"dataset_con_columnas_2024.csv"))
View(df)
data_webA <- load_webA();
# Updated power calculation function using OLS model
set.seed(23658)
power <- function(rep, esize, N) {
pv <- rep(NA, rep)  # Initialize p-values storage
for (i in 1:rep) {
# Generate the data
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
# Add normally distributed errors with sigma = 0.2
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 1)
# Fit the linear model
model <- lm(given ~ samegroup, data = mydata)
# Extract p-value for 'samegroup' coefficient
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
# Store p-value
pv[i] <- p
}
# Calculate power
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Single calculation with a fixed N
power(rep = 100, esize = 0.8, N = 30)
# Loop over multiple N values
N <- seq(10, 200, 2)
M <- length(N)
N.power <- rep(NA, M)
for (i in 1:M) {
N.power[i] <- power(rep = 100, esize = 0.8, N = N[i])
}
# Plot the power calculations
plot(N.power, N / 2, main = "Power calculations", ylab = "Number of obs in each group", xlab = "Power")
###############################
############# Multiple betas
###############################
# Power calculation function using OLS model
# Define the updated power function with OLS model
set.seed(23569)
power <- function(rep, esize, N) {
pv <- rep(NA, rep)
for (i in 1:rep) {
mydata <- data.frame(samegroup = rep(c(TRUE, FALSE), each = N / 2))
mydata$given <- 4.6 + mydata$samegroup * esize + rnorm(N, mean = 0, sd = 1)
model <- lm(given ~ samegroup, data = mydata)
p <- summary(model)$coefficients["samegroupTRUE", "Pr(>|t|)"]
pv[i] <- p
}
power <- sum(pv < 0.05) / length(pv)
return(power)
}
# Set up parameters for the simulation
N <- seq(10, 100, 2)  # Sample sizes to test
effects <- seq(0.6, 0.9, by = 0.1)  # Different effect sizes to test
M <- length(N)
K <- length(effects)
# Initialize a matrix to store power calculations for each (N, effect size) pair
ne.power <- matrix(NA, nrow = M, ncol = K)
# Calculate power for each effect size and sample size
for (i in 1:M) {
for (j in 1:K) {
ne.power[i, j] <- power(rep = 500, esize = effects[j], N = N[i])
}
}
# Plot the results
par(mfrow = c(3, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
abline(v = 0.8, col = "red", lty = 2)  # Add a red vertical dashed line at x = 0.8
}
# Plot the results
par(mfrow = c(2, 2))  # Set up a 3x2 plot layout
colors <- c("red", "blue", "green", "purple", "springgreen4", "grey30")  # Define colors for each plot
for (j in 1:K) {
plot(ne.power[, j], N / 2, col = colors[j], main = paste("Effect =", effects[j]),
xlim = c(0, 1), ylab = "Number of obs per group", xlab = "Power")
abline(v = 0.8, col = "red", lty = 2)  # Add a red vertical dashed line at x = 0.8
}
library(foreign)
library(dplyr)
library(stringr)
library(ggplot2)
library(gridExtra)
library(tidyr)
rm(list=ls())
path_github <-"C:/Users/DCCS2/Documents/GitHub/Multi-level-collective-action-in-small-scale-fisheries/Exptal Sessions/R/"
path_datos<-"C:/Users/DCCS2/Dropbox/CICS/Experiments/Islitas/Data/Sessions"
setwd(path_github)
datos_csv<-"datos_piloto_islitas.csv"
# List all CSV files in the specified folder
file_list <- list.files(path = path_datos, pattern = "\\.csv$", full.names = TRUE)
# Read each CSV file and combine them into one data frame
df<- do.call(rbind, lapply(file_list, read.csv))
View(df)
table(df$survey3.1.player.pregunta_abierta)
